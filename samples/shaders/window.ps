#include ../engine_shaders/types.shader
#include ../engine_shaders/materials/material.shader
#include ../engine_shaders/lighting/direct_light.shader
#include ../engine_shaders/lighting/point_light.shader
#include ../engine_shaders/lighting/spot_light.shader

struct VSOut
{
    float3 positionWorld : XPE_POSITION_WORLD;
    float2 texcoord : XPE_TEXCOORD2;
    float3 normal : XPE_NORMAL2;
    float4 positionClip : SV_POSITION;
    float3 viewPosition : XPE_VIEW_POSITION;
    uint materialIndex : XPE_MATERIAL_INDEX;
};

float4 ps_main(VSOut psIn) : SV_TARGET
{
    W = psIn.positionWorld;
    V = normalize(psIn.viewPosition - psIn.positionWorld);
    N = normalize(psIn.normal);

    float4 albedo = GetAlbedo(psIn.materialIndex, psIn.texcoord);
    float metallic = Materials[psIn.materialIndex].MetallicFactor;
    float roughness = Materials[psIn.materialIndex].RoughnessFactor;
    float ao = Materials[psIn.materialIndex].AOFactor;

    float3 color = albedo.rgb;

//    uint directLightSize = 0;
//    uint directLightStride = 0;
//    DirectLights.GetDimensions(directLightSize, directLightStride);
    for (uint i = 0 ; i < 1; i++) {
        DirectLight directLight = DirectLights[i];
        float3 lightPos = directLight.Position;
        float3 lightColor = directLight.Color;
        L = normalize(lightPos - W);
        R = reflect(-L, N);

        float ambient = (1.0 - ao);
        float diffuse = roughness * max(dot(N, L), 0.0);
        float specular = (1.0 - roughness) * pow(max(dot(V, R), 0.0), 32);

        color = albedo.rgb * (ambient + diffuse + specular) * lightColor;
    }

    return float4(color, 1.0);
}