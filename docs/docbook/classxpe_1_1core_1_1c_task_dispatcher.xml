<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classxpe_1_1core_1_1c_task_dispatcher" xml:lang="en-US">
<title>xpe::core::cTaskDispatcher Class Reference</title>
<indexterm><primary>xpe::core::cTaskDispatcher</primary></indexterm>
<para>
<computeroutput>#include &lt;task_manager.hpp&gt;</computeroutput>
</para>
<para>Inheritance diagram for xpe::core::cTaskDispatcher:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classxpe_1_1core_1_1c_task_dispatcher.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classxpe_1_1core_1_1c_task_dispatcher_1a8b31fc506fb0e2f9f8226ef416c895fc">cTaskDispatcher</link> (<link linkend="_namespacexpe_1_1core_1aa507c1ad5e6e22c6561d60671555dafc">u32</link> <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">workerSize</link>, <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">usize</link> <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">taskBufferSize</link>, <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">const</link> <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">char</link> *<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">name</link>, <link linkend="_classxpe_1_1core_1_1c_thread_1a714e0fbeefe921f4fbe195de023a4fa1">cThread::ePriority</link> <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">priority</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">void</link> <link linkend="_classxpe_1_1core_1_1c_task_dispatcher_1a9c0c18dbf564186d946ca962fea4b898">Dispatch</link> (<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">const</link> <link linkend="_structxpe_1_1core_1_1s_task">sTask</link> &amp;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">task</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">void</link> <link linkend="_classxpe_1_1core_1_1c_task_dispatcher_1a4811adb9542a927aa10e811016738a03">Dispatch</link> (<link linkend="_namespacexpe_1_1core_1aa507c1ad5e6e22c6561d60671555dafc">u32</link> <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">tasksPerThread</link>, <link linkend="_namespacexpe_1_1core_1aa507c1ad5e6e22c6561d60671555dafc">u32</link> <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">taskSize</link>, <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">const</link> <link linkend="_structxpe_1_1core_1_1s_task">sTask</link> &amp;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">task</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">bool</link> <link linkend="_classxpe_1_1core_1_1c_task_dispatcher_1a854d3943678b3a7acba946444716cd3f">IsBusy</link> ()</para>
</listitem>
            <listitem><para><link linkend="_namespacexpe_1_1core_1aa507c1ad5e6e22c6561d60671555dafc">u32</link> <link linkend="_classxpe_1_1core_1_1c_task_dispatcher_1a49bf69fb2bde1506378fb05c6c9442a7">GetWorkerCount</link> () <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">const</link></para>
</listitem>
            <listitem><para><link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">void</link> <link linkend="_classxpe_1_1core_1_1c_task_dispatcher_1a5b0ee750b601bbefec2f5d142c5704b3">Wait</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_classxpe_1_1core_1_1c_object">xpe::core::cObject</link>        <itemizedlist>
            <listitem><para><link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">void</link> * <link linkend="_classxpe_1_1core_1_1c_object_1a94001505b3b68276770a97bc35079194">operator new</link> (<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">usize</link> <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">byteSize</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">void</link> <link linkend="_classxpe_1_1core_1_1c_object_1af52ced913116436c9a1410d942d1911e">operator delete</link> (<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">void</link> *<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">address</link>)</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">void</link> <link linkend="_classxpe_1_1core_1_1c_task_dispatcher_1a65dcf432e2c479da29f08ae128cee2b4">Poll</link> ()</para>
</listitem>
            <listitem><para><link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">void</link> <link linkend="_classxpe_1_1core_1_1c_task_dispatcher_1a0ed830ba0ff8290188850e8d323ac592">InitThread</link> (<link linkend="_namespacexpe_1_1core_1aa507c1ad5e6e22c6561d60671555dafc">u32</link> <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">workerId</link>, <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">const</link> <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">char</link> *<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">name</link>, <link linkend="_classxpe_1_1core_1_1c_thread_1a714e0fbeefe921f4fbe195de023a4fa1">cThread::ePriority</link> <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">priority</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classxpe_1_1core_1_1c_ring_buffer">cRingBuffer</link>&lt; <link linkend="_structxpe_1_1core_1_1s_task">sTask</link> &gt; <link linkend="_classxpe_1_1core_1_1c_task_dispatcher_1a6b88d57d92d2d9745c3df4d684edea50">m_TaskBuffer</link></para>
</listitem>
            <listitem><para>std::condition_variable <link linkend="_classxpe_1_1core_1_1c_task_dispatcher_1ab138311f4c5844fc1ffdd9b575c5e057">m_WakeCondition</link></para>
</listitem>
            <listitem><para>std::mutex <link linkend="_classxpe_1_1core_1_1c_task_dispatcher_1aeed8047b981e99e67ae3025006d586e9">m_WakeMutex</link></para>
</listitem>
            <listitem><para><link linkend="_namespacexpe_1_1core_1a5339d437e076788ee8b8217188685ee6">u64</link> <link linkend="_classxpe_1_1core_1_1c_task_dispatcher_1a122a3bb1bfa10ac948f995fe3a5c820e">m_TasksTodo</link></para>
</listitem>
            <listitem><para>std::atomic&lt; <link linkend="_namespacexpe_1_1core_1a5339d437e076788ee8b8217188685ee6">u64</link> &gt; <link linkend="_classxpe_1_1core_1_1c_task_dispatcher_1a2a1a61cf6c2caea1de30583c0146f7b5">m_TasksDone</link></para>
</listitem>
            <listitem><para><link linkend="_namespacexpe_1_1core_1aa507c1ad5e6e22c6561d60671555dafc">u32</link> <link linkend="_classxpe_1_1core_1_1c_task_dispatcher_1a932baf4d6c1c03c8968a8129da4ab6d1">m_WorkerCount</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classxpe_1_1core_1_1c_task_dispatcher_1a8b31fc506fb0e2f9f8226ef416c895fc"/><section>
    <title>cTaskDispatcher()</title>
<indexterm><primary>cTaskDispatcher</primary><secondary>xpe::core::cTaskDispatcher</secondary></indexterm>
<indexterm><primary>xpe::core::cTaskDispatcher</primary><secondary>cTaskDispatcher</secondary></indexterm>
<para><computeroutput>xpe::core::cTaskDispatcher::cTaskDispatcher (<link linkend="_namespacexpe_1_1core_1aa507c1ad5e6e22c6561d60671555dafc">u32</link> workerSize, <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">usize</link> taskBufferSize, <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">const</link> <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">char</link> * name, <link linkend="_classxpe_1_1core_1_1c_thread_1a714e0fbeefe921f4fbe195de023a4fa1">cThread::ePriority</link> priority)</computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classxpe_1_1core_1_1c_task_dispatcher_1a9c0c18dbf564186d946ca962fea4b898"/><section>
    <title>Dispatch()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Dispatch</primary><secondary>xpe::core::cTaskDispatcher</secondary></indexterm>
<indexterm><primary>xpe::core::cTaskDispatcher</primary><secondary>Dispatch</secondary></indexterm>
<para><computeroutput><link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">void</link> xpe::core::cTaskDispatcher::Dispatch (<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">const</link> <link linkend="_structxpe_1_1core_1_1s_task">sTask</link> &amp; task)</computeroutput></para></section>
<anchor xml:id="_classxpe_1_1core_1_1c_task_dispatcher_1a4811adb9542a927aa10e811016738a03"/><section>
    <title>Dispatch()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Dispatch</primary><secondary>xpe::core::cTaskDispatcher</secondary></indexterm>
<indexterm><primary>xpe::core::cTaskDispatcher</primary><secondary>Dispatch</secondary></indexterm>
<para><computeroutput><link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">void</link> xpe::core::cTaskDispatcher::Dispatch (<link linkend="_namespacexpe_1_1core_1aa507c1ad5e6e22c6561d60671555dafc">u32</link> tasksPerThread, <link linkend="_namespacexpe_1_1core_1aa507c1ad5e6e22c6561d60671555dafc">u32</link> taskSize, <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">const</link> <link linkend="_structxpe_1_1core_1_1s_task">sTask</link> &amp; task)</computeroutput></para></section>
<anchor xml:id="_classxpe_1_1core_1_1c_task_dispatcher_1a49bf69fb2bde1506378fb05c6c9442a7"/><section>
    <title>GetWorkerCount()</title>
<indexterm><primary>GetWorkerCount</primary><secondary>xpe::core::cTaskDispatcher</secondary></indexterm>
<indexterm><primary>xpe::core::cTaskDispatcher</primary><secondary>GetWorkerCount</secondary></indexterm>
<para><computeroutput><link linkend="_namespacexpe_1_1core_1aa507c1ad5e6e22c6561d60671555dafc">u32</link> xpe::core::cTaskDispatcher::GetWorkerCount ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classxpe_1_1core_1_1c_task_dispatcher_1a0ed830ba0ff8290188850e8d323ac592"/><section>
    <title>InitThread()</title>
<indexterm><primary>InitThread</primary><secondary>xpe::core::cTaskDispatcher</secondary></indexterm>
<indexterm><primary>xpe::core::cTaskDispatcher</primary><secondary>InitThread</secondary></indexterm>
<para><computeroutput><link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">void</link> xpe::core::cTaskDispatcher::InitThread (<link linkend="_namespacexpe_1_1core_1aa507c1ad5e6e22c6561d60671555dafc">u32</link> workerId, <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">const</link> <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">char</link> * name, <link linkend="_classxpe_1_1core_1_1c_thread_1a714e0fbeefe921f4fbe195de023a4fa1">cThread::ePriority</link> priority)<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classxpe_1_1core_1_1c_task_dispatcher_1a854d3943678b3a7acba946444716cd3f"/><section>
    <title>IsBusy()</title>
<indexterm><primary>IsBusy</primary><secondary>xpe::core::cTaskDispatcher</secondary></indexterm>
<indexterm><primary>xpe::core::cTaskDispatcher</primary><secondary>IsBusy</secondary></indexterm>
<para><computeroutput><link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">bool</link> xpe::core::cTaskDispatcher::IsBusy ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classxpe_1_1core_1_1c_task_dispatcher_1a65dcf432e2c479da29f08ae128cee2b4"/><section>
    <title>Poll()</title>
<indexterm><primary>Poll</primary><secondary>xpe::core::cTaskDispatcher</secondary></indexterm>
<indexterm><primary>xpe::core::cTaskDispatcher</primary><secondary>Poll</secondary></indexterm>
<para><computeroutput><link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">void</link> xpe::core::cTaskDispatcher::Poll ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classxpe_1_1core_1_1c_task_dispatcher_1a5b0ee750b601bbefec2f5d142c5704b3"/><section>
    <title>Wait()</title>
<indexterm><primary>Wait</primary><secondary>xpe::core::cTaskDispatcher</secondary></indexterm>
<indexterm><primary>xpe::core::cTaskDispatcher</primary><secondary>Wait</secondary></indexterm>
<para><computeroutput><link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">void</link> xpe::core::cTaskDispatcher::Wait ( )</computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classxpe_1_1core_1_1c_task_dispatcher_1a6b88d57d92d2d9745c3df4d684edea50"/><section>
    <title>m_TaskBuffer</title>
<indexterm><primary>m_TaskBuffer</primary><secondary>xpe::core::cTaskDispatcher</secondary></indexterm>
<indexterm><primary>xpe::core::cTaskDispatcher</primary><secondary>m_TaskBuffer</secondary></indexterm>
<para><computeroutput><link linkend="_classxpe_1_1core_1_1c_ring_buffer">cRingBuffer</link>&lt;<link linkend="_structxpe_1_1core_1_1s_task">sTask</link>&gt; xpe::core::cTaskDispatcher::m_TaskBuffer<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classxpe_1_1core_1_1c_task_dispatcher_1a2a1a61cf6c2caea1de30583c0146f7b5"/><section>
    <title>m_TasksDone</title>
<indexterm><primary>m_TasksDone</primary><secondary>xpe::core::cTaskDispatcher</secondary></indexterm>
<indexterm><primary>xpe::core::cTaskDispatcher</primary><secondary>m_TasksDone</secondary></indexterm>
<para><computeroutput>std::atomic&lt;<link linkend="_namespacexpe_1_1core_1a5339d437e076788ee8b8217188685ee6">u64</link>&gt; xpe::core::cTaskDispatcher::m_TasksDone<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classxpe_1_1core_1_1c_task_dispatcher_1a122a3bb1bfa10ac948f995fe3a5c820e"/><section>
    <title>m_TasksTodo</title>
<indexterm><primary>m_TasksTodo</primary><secondary>xpe::core::cTaskDispatcher</secondary></indexterm>
<indexterm><primary>xpe::core::cTaskDispatcher</primary><secondary>m_TasksTodo</secondary></indexterm>
<para><computeroutput><link linkend="_namespacexpe_1_1core_1a5339d437e076788ee8b8217188685ee6">u64</link> xpe::core::cTaskDispatcher::m_TasksTodo<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classxpe_1_1core_1_1c_task_dispatcher_1ab138311f4c5844fc1ffdd9b575c5e057"/><section>
    <title>m_WakeCondition</title>
<indexterm><primary>m_WakeCondition</primary><secondary>xpe::core::cTaskDispatcher</secondary></indexterm>
<indexterm><primary>xpe::core::cTaskDispatcher</primary><secondary>m_WakeCondition</secondary></indexterm>
<para><computeroutput>std::condition_variable xpe::core::cTaskDispatcher::m_WakeCondition<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classxpe_1_1core_1_1c_task_dispatcher_1aeed8047b981e99e67ae3025006d586e9"/><section>
    <title>m_WakeMutex</title>
<indexterm><primary>m_WakeMutex</primary><secondary>xpe::core::cTaskDispatcher</secondary></indexterm>
<indexterm><primary>xpe::core::cTaskDispatcher</primary><secondary>m_WakeMutex</secondary></indexterm>
<para><computeroutput>std::mutex xpe::core::cTaskDispatcher::m_WakeMutex<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classxpe_1_1core_1_1c_task_dispatcher_1a932baf4d6c1c03c8968a8129da4ab6d1"/><section>
    <title>m_WorkerCount</title>
<indexterm><primary>m_WorkerCount</primary><secondary>xpe::core::cTaskDispatcher</secondary></indexterm>
<indexterm><primary>xpe::core::cTaskDispatcher</primary><secondary>m_WorkerCount</secondary></indexterm>
<para><computeroutput><link linkend="_namespacexpe_1_1core_1aa507c1ad5e6e22c6561d60671555dafc">u32</link> xpe::core::cTaskDispatcher::m_WorkerCount<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
engine/src/core/<link linkend="_task__manager_8hpp">task_manager.hpp</link>engine/src/core/<link linkend="_task__manager_8cpp">task_manager.cpp</link></section>
</section>
