<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_core_2allocators_8hpp" xml:lang="en-US">
<title>engine/src/core/allocators.hpp File Reference</title>
<indexterm><primary>engine/src/core/allocators.hpp</primary></indexterm>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classxpe_1_1core_1_1c_hot_allocator">xpe::core::cHotAllocator&lt; T &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_classxpe_1_1core_1_1c_main_allocator">xpe::core::cMainAllocator&lt; T &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_classxpe_1_1core_1_1c_memory_stack_manager">xpe::core::cMemoryStackManager</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structxpe_1_1core_1_1s_stack_allocator">xpe::core::sStackAllocator</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structxpe_1_1core_1_1s_stack_typed_allocator">xpe::core::sStackTypedAllocator&lt; T &gt;</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespacexpe">xpe</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespacexpe_1_1core">xpe::core</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_core_2allocators_8hpp_1a907c182cb7f92ee2064968fda57d6656">hot_alloc</link>(size)&#160;&#160;&#160;<link linkend="_classxpe_1_1core_1_1c_memory_manager_1a876715269b6bd8bd6b0f333836d7c229">xpe::core::cMemoryManager::HotPools</link>-&gt;Allocate(size)</para>
</listitem>
            <listitem><para>#define <link linkend="_core_2allocators_8hpp_1ab1b790797d76f5cdbf0071e7c6bd1f4f">hot_allocT</link>(T,  count)&#160;&#160;&#160;static_cast&lt;T*&gt;(<link linkend="_core_2allocators_8hpp_1a907c182cb7f92ee2064968fda57d6656">hot_alloc</link>(sizeof(T) * count))</para>
</listitem>
            <listitem><para>#define <link linkend="_core_2allocators_8hpp_1a2bfcf8361a911e1d5f9356cea3ea74c8">hot_construct</link>(T)&#160;&#160;&#160;<link linkend="_classxpe_1_1core_1_1c_memory_manager_1a876715269b6bd8bd6b0f333836d7c229">xpe::core::cMemoryManager::HotPools</link>-&gt;AllocateConstruct&lt;T&gt;()</para>
</listitem>
            <listitem><para>#define <link linkend="_core_2allocators_8hpp_1ac67ca42f522dd054da17196865395fc2">hot_construct_args</link>(T, ...)&#160;&#160;&#160;<link linkend="_classxpe_1_1core_1_1c_memory_manager_1a876715269b6bd8bd6b0f333836d7c229">xpe::core::cMemoryManager::HotPools</link>-&gt;AllocateConstructArgs&lt;T&gt;(__VA_ARGS__)</para>
</listitem>
            <listitem><para>#define <link linkend="_core_2allocators_8hpp_1a787bfb5b87d8abdec2e3c38601cf4a31">hot_free</link>(addr)&#160;&#160;&#160;<link linkend="_classxpe_1_1core_1_1c_memory_manager_1a876715269b6bd8bd6b0f333836d7c229">xpe::core::cMemoryManager::HotPools</link>-&gt;Free(addr)</para>
</listitem>
            <listitem><para>#define <link linkend="_core_2allocators_8hpp_1a375348b94c144f7dd96baac0e308ef4e">hot_destruct</link>(T,  addr)</para>
</listitem>
            <listitem><para>#define <link linkend="_core_2allocators_8hpp_1a0b2c774a281f8d83b9add0b64bf4cff1">main_alloc</link>(size)&#160;&#160;&#160;<link linkend="_classxpe_1_1core_1_1c_memory_manager_1a936d86a0072701410f49106edf16abba">xpe::core::cMemoryManager::MainPools</link>-&gt;Allocate(size)</para>
</listitem>
            <listitem><para>#define <link linkend="_core_2allocators_8hpp_1a302f380460dc88796d2decc19478bf62">main_allocT</link>(T,  count)&#160;&#160;&#160;static_cast&lt;T*&gt;(<link linkend="_core_2allocators_8hpp_1a0b2c774a281f8d83b9add0b64bf4cff1">main_alloc</link>(sizeof(T) * count))</para>
</listitem>
            <listitem><para>#define <link linkend="_core_2allocators_8hpp_1ad15daf8841b5c2684e797833d6d948ec">main_construct</link>(T)&#160;&#160;&#160;<link linkend="_classxpe_1_1core_1_1c_memory_manager_1a936d86a0072701410f49106edf16abba">xpe::core::cMemoryManager::MainPools</link>-&gt;AllocateConstruct&lt;T&gt;()</para>
</listitem>
            <listitem><para>#define <link linkend="_core_2allocators_8hpp_1af6f8111492d698bb692248ef013f538a">main_construct_args</link>(T, ...)&#160;&#160;&#160;<link linkend="_classxpe_1_1core_1_1c_memory_manager_1a936d86a0072701410f49106edf16abba">xpe::core::cMemoryManager::MainPools</link>-&gt;AllocateConstructArgs&lt;T&gt;(__VA_ARGS__)</para>
</listitem>
            <listitem><para>#define <link linkend="_core_2allocators_8hpp_1a998b108b08cd42f273b431e77afe83cc">main_free</link>(addr)&#160;&#160;&#160;<link linkend="_classxpe_1_1core_1_1c_memory_manager_1a936d86a0072701410f49106edf16abba">xpe::core::cMemoryManager::MainPools</link>-&gt;Free(addr)</para>
</listitem>
            <listitem><para>#define <link linkend="_core_2allocators_8hpp_1a1141b5be50573f8004090ec0346d4cec">main_destruct</link>(T,  addr)</para>
</listitem>
            <listitem><para>#define <link linkend="_core_2allocators_8hpp_1a8cf9fa12fa5eb5f94831f79c7bc47caf">salloc</link>(size)&#160;&#160;&#160;alloca(size)</para>
</listitem>
            <listitem><para>#define <link linkend="_core_2allocators_8hpp_1aec82d3215267096f8c99bd3378cba794">sallocT</link>(T,  count)&#160;&#160;&#160;static_cast&lt;T*&gt;(alloca(sizeof(T) * count))</para>
</listitem>
            <listitem><para>#define <link linkend="_core_2allocators_8hpp_1abdfa33f12655d0a8f26a1fb077ee2f0a">LogStackMemory</link>()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">void</link> * <link linkend="_namespacexpe_1_1core_1ae5d0b54168ae6e02cf8c8b7d9327c96f">xpe::core::align16_malloc</link> (<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">usize</link> <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">size</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">void</link> <link linkend="_namespacexpe_1_1core_1a10508d83f4fe37b4a622196fe785a7b5">xpe::core::align16_free</link> (<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">void</link> *<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">address</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">class</link> <link linkend="_namespacexpe_1_1core_1ae6ef6570753015ed6148c228eaac7bf8af3764cd9d20fc009f54427329b8d297b">T</link> , <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">class</link> <link linkend="_namespacexpe_1_1core_1ae6ef6570753015ed6148c228eaac7bf8abc4622eb1258ea0912a5a84d861e9997">U</link> &gt; </para><para><link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">bool</link> <link linkend="_namespacexpe_1_1core_1a532904247c5a467c46d0af45f025fdd2">xpe::core::operator==</link> (<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">const</link> <link linkend="_classxpe_1_1core_1_1c_hot_allocator">cHotAllocator</link>&lt; <link linkend="_namespacexpe_1_1core_1ae6ef6570753015ed6148c228eaac7bf8af3764cd9d20fc009f54427329b8d297b">T</link> &gt; &amp;, <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">const</link> <link linkend="_classxpe_1_1core_1_1c_hot_allocator">cHotAllocator</link>&lt; <link linkend="_namespacexpe_1_1core_1ae6ef6570753015ed6148c228eaac7bf8abc4622eb1258ea0912a5a84d861e9997">U</link> &gt; &amp;)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">class</link> <link linkend="_namespacexpe_1_1core_1ae6ef6570753015ed6148c228eaac7bf8af3764cd9d20fc009f54427329b8d297b">T</link> , <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">class</link> <link linkend="_namespacexpe_1_1core_1ae6ef6570753015ed6148c228eaac7bf8abc4622eb1258ea0912a5a84d861e9997">U</link> &gt; </para><para><link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">bool</link> <link linkend="_namespacexpe_1_1core_1a4e5ab867c8d0a0ed3fb0ac3ec7dd8caa">xpe::core::operator!=</link> (<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">const</link> <link linkend="_classxpe_1_1core_1_1c_hot_allocator">cHotAllocator</link>&lt; <link linkend="_namespacexpe_1_1core_1ae6ef6570753015ed6148c228eaac7bf8af3764cd9d20fc009f54427329b8d297b">T</link> &gt; &amp;, <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">const</link> <link linkend="_classxpe_1_1core_1_1c_hot_allocator">cHotAllocator</link>&lt; <link linkend="_namespacexpe_1_1core_1ae6ef6570753015ed6148c228eaac7bf8abc4622eb1258ea0912a5a84d861e9997">U</link> &gt; &amp;)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">class</link> <link linkend="_namespacexpe_1_1core_1ae6ef6570753015ed6148c228eaac7bf8af3764cd9d20fc009f54427329b8d297b">T</link> , <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">class</link> <link linkend="_namespacexpe_1_1core_1ae6ef6570753015ed6148c228eaac7bf8abc4622eb1258ea0912a5a84d861e9997">U</link> &gt; </para><para><link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">bool</link> <link linkend="_namespacexpe_1_1core_1ad6278e712d614cc282526c661f1a384c">xpe::core::operator==</link> (<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">const</link> <link linkend="_classxpe_1_1core_1_1c_main_allocator">cMainAllocator</link>&lt; <link linkend="_namespacexpe_1_1core_1ae6ef6570753015ed6148c228eaac7bf8af3764cd9d20fc009f54427329b8d297b">T</link> &gt; &amp;, <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">const</link> <link linkend="_classxpe_1_1core_1_1c_main_allocator">cMainAllocator</link>&lt; <link linkend="_namespacexpe_1_1core_1ae6ef6570753015ed6148c228eaac7bf8abc4622eb1258ea0912a5a84d861e9997">U</link> &gt; &amp;)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">class</link> <link linkend="_namespacexpe_1_1core_1ae6ef6570753015ed6148c228eaac7bf8af3764cd9d20fc009f54427329b8d297b">T</link> , <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">class</link> <link linkend="_namespacexpe_1_1core_1ae6ef6570753015ed6148c228eaac7bf8abc4622eb1258ea0912a5a84d861e9997">U</link> &gt; </para><para><link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">bool</link> <link linkend="_namespacexpe_1_1core_1a6f7897a848f4c0cbdf34467fbec365f5">xpe::core::operator!=</link> (<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">const</link> <link linkend="_classxpe_1_1core_1_1c_main_allocator">cMainAllocator</link>&lt; <link linkend="_namespacexpe_1_1core_1ae6ef6570753015ed6148c228eaac7bf8af3764cd9d20fc009f54427329b8d297b">T</link> &gt; &amp;, <link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">const</link> <link linkend="_classxpe_1_1core_1_1c_main_allocator">cMainAllocator</link>&lt; <link linkend="_namespacexpe_1_1core_1ae6ef6570753015ed6148c228eaac7bf8abc4622eb1258ea0912a5a84d861e9997">U</link> &gt; &amp;)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_core_2allocators_8hpp_1a907c182cb7f92ee2064968fda57d6656"/><section>
    <title>hot_alloc</title>
<indexterm><primary>hot_alloc</primary><secondary>allocators.hpp</secondary></indexterm>
<indexterm><primary>allocators.hpp</primary><secondary>hot_alloc</secondary></indexterm>
<para><computeroutput>#define hot_alloc( size)&#160;&#160;&#160;<link linkend="_classxpe_1_1core_1_1c_memory_manager_1a876715269b6bd8bd6b0f333836d7c229">xpe::core::cMemoryManager::HotPools</link>-&gt;Allocate(size)</computeroutput></para></section>
<anchor xml:id="_core_2allocators_8hpp_1ab1b790797d76f5cdbf0071e7c6bd1f4f"/><section>
    <title>hot_allocT</title>
<indexterm><primary>hot_allocT</primary><secondary>allocators.hpp</secondary></indexterm>
<indexterm><primary>allocators.hpp</primary><secondary>hot_allocT</secondary></indexterm>
<para><computeroutput>#define hot_allocT( T,  count)&#160;&#160;&#160;static_cast&lt;T*&gt;(<link linkend="_core_2allocators_8hpp_1a907c182cb7f92ee2064968fda57d6656">hot_alloc</link>(sizeof(T) * count))</computeroutput></para></section>
<anchor xml:id="_core_2allocators_8hpp_1a2bfcf8361a911e1d5f9356cea3ea74c8"/><section>
    <title>hot_construct</title>
<indexterm><primary>hot_construct</primary><secondary>allocators.hpp</secondary></indexterm>
<indexterm><primary>allocators.hpp</primary><secondary>hot_construct</secondary></indexterm>
<para><computeroutput>#define hot_construct( T)&#160;&#160;&#160;<link linkend="_classxpe_1_1core_1_1c_memory_manager_1a876715269b6bd8bd6b0f333836d7c229">xpe::core::cMemoryManager::HotPools</link>-&gt;AllocateConstruct&lt;T&gt;()</computeroutput></para></section>
<anchor xml:id="_core_2allocators_8hpp_1ac67ca42f522dd054da17196865395fc2"/><section>
    <title>hot_construct_args</title>
<indexterm><primary>hot_construct_args</primary><secondary>allocators.hpp</secondary></indexterm>
<indexterm><primary>allocators.hpp</primary><secondary>hot_construct_args</secondary></indexterm>
<para><computeroutput>#define hot_construct_args( T,  ...)&#160;&#160;&#160;<link linkend="_classxpe_1_1core_1_1c_memory_manager_1a876715269b6bd8bd6b0f333836d7c229">xpe::core::cMemoryManager::HotPools</link>-&gt;AllocateConstructArgs&lt;T&gt;(__VA_ARGS__)</computeroutput></para></section>
<anchor xml:id="_core_2allocators_8hpp_1a375348b94c144f7dd96baac0e308ef4e"/><section>
    <title>hot_destruct</title>
<indexterm><primary>hot_destruct</primary><secondary>allocators.hpp</secondary></indexterm>
<indexterm><primary>allocators.hpp</primary><secondary>hot_destruct</secondary></indexterm>
<para><computeroutput>#define hot_destruct( T,  addr)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">addr-&gt;~T();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
hot_free(addr)
</programlisting></section>
<anchor xml:id="_core_2allocators_8hpp_1a787bfb5b87d8abdec2e3c38601cf4a31"/><section>
    <title>hot_free</title>
<indexterm><primary>hot_free</primary><secondary>allocators.hpp</secondary></indexterm>
<indexterm><primary>allocators.hpp</primary><secondary>hot_free</secondary></indexterm>
<para><computeroutput>#define hot_free( addr)&#160;&#160;&#160;<link linkend="_classxpe_1_1core_1_1c_memory_manager_1a876715269b6bd8bd6b0f333836d7c229">xpe::core::cMemoryManager::HotPools</link>-&gt;Free(addr)</computeroutput></para></section>
<anchor xml:id="_core_2allocators_8hpp_1abdfa33f12655d0a8f26a1fb077ee2f0a"/><section>
    <title>LogStackMemory</title>
<indexterm><primary>LogStackMemory</primary><secondary>allocators.hpp</secondary></indexterm>
<indexterm><primary>allocators.hpp</primary><secondary>LogStackMemory</secondary></indexterm>
<para><computeroutput>#define LogStackMemory( )</computeroutput></para></section>
<anchor xml:id="_core_2allocators_8hpp_1a0b2c774a281f8d83b9add0b64bf4cff1"/><section>
    <title>main_alloc</title>
<indexterm><primary>main_alloc</primary><secondary>allocators.hpp</secondary></indexterm>
<indexterm><primary>allocators.hpp</primary><secondary>main_alloc</secondary></indexterm>
<para><computeroutput>#define main_alloc( size)&#160;&#160;&#160;<link linkend="_classxpe_1_1core_1_1c_memory_manager_1a936d86a0072701410f49106edf16abba">xpe::core::cMemoryManager::MainPools</link>-&gt;Allocate(size)</computeroutput></para></section>
<anchor xml:id="_core_2allocators_8hpp_1a302f380460dc88796d2decc19478bf62"/><section>
    <title>main_allocT</title>
<indexterm><primary>main_allocT</primary><secondary>allocators.hpp</secondary></indexterm>
<indexterm><primary>allocators.hpp</primary><secondary>main_allocT</secondary></indexterm>
<para><computeroutput>#define main_allocT( T,  count)&#160;&#160;&#160;static_cast&lt;T*&gt;(<link linkend="_core_2allocators_8hpp_1a0b2c774a281f8d83b9add0b64bf4cff1">main_alloc</link>(sizeof(T) * count))</computeroutput></para></section>
<anchor xml:id="_core_2allocators_8hpp_1ad15daf8841b5c2684e797833d6d948ec"/><section>
    <title>main_construct</title>
<indexterm><primary>main_construct</primary><secondary>allocators.hpp</secondary></indexterm>
<indexterm><primary>allocators.hpp</primary><secondary>main_construct</secondary></indexterm>
<para><computeroutput>#define main_construct( T)&#160;&#160;&#160;<link linkend="_classxpe_1_1core_1_1c_memory_manager_1a936d86a0072701410f49106edf16abba">xpe::core::cMemoryManager::MainPools</link>-&gt;AllocateConstruct&lt;T&gt;()</computeroutput></para></section>
<anchor xml:id="_core_2allocators_8hpp_1af6f8111492d698bb692248ef013f538a"/><section>
    <title>main_construct_args</title>
<indexterm><primary>main_construct_args</primary><secondary>allocators.hpp</secondary></indexterm>
<indexterm><primary>allocators.hpp</primary><secondary>main_construct_args</secondary></indexterm>
<para><computeroutput>#define main_construct_args( T,  ...)&#160;&#160;&#160;<link linkend="_classxpe_1_1core_1_1c_memory_manager_1a936d86a0072701410f49106edf16abba">xpe::core::cMemoryManager::MainPools</link>-&gt;AllocateConstructArgs&lt;T&gt;(__VA_ARGS__)</computeroutput></para></section>
<anchor xml:id="_core_2allocators_8hpp_1a1141b5be50573f8004090ec0346d4cec"/><section>
    <title>main_destruct</title>
<indexterm><primary>main_destruct</primary><secondary>allocators.hpp</secondary></indexterm>
<indexterm><primary>allocators.hpp</primary><secondary>main_destruct</secondary></indexterm>
<para><computeroutput>#define main_destruct( T,  addr)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">addr-&gt;~T();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
main_free(addr)
</programlisting></section>
<anchor xml:id="_core_2allocators_8hpp_1a998b108b08cd42f273b431e77afe83cc"/><section>
    <title>main_free</title>
<indexterm><primary>main_free</primary><secondary>allocators.hpp</secondary></indexterm>
<indexterm><primary>allocators.hpp</primary><secondary>main_free</secondary></indexterm>
<para><computeroutput>#define main_free( addr)&#160;&#160;&#160;<link linkend="_classxpe_1_1core_1_1c_memory_manager_1a936d86a0072701410f49106edf16abba">xpe::core::cMemoryManager::MainPools</link>-&gt;Free(addr)</computeroutput></para></section>
<anchor xml:id="_core_2allocators_8hpp_1a8cf9fa12fa5eb5f94831f79c7bc47caf"/><section>
    <title>salloc</title>
<indexterm><primary>salloc</primary><secondary>allocators.hpp</secondary></indexterm>
<indexterm><primary>allocators.hpp</primary><secondary>salloc</secondary></indexterm>
<para><computeroutput>#define salloc( size)&#160;&#160;&#160;alloca(size)</computeroutput></para></section>
<anchor xml:id="_core_2allocators_8hpp_1aec82d3215267096f8c99bd3378cba794"/><section>
    <title>sallocT</title>
<indexterm><primary>sallocT</primary><secondary>allocators.hpp</secondary></indexterm>
<indexterm><primary>allocators.hpp</primary><secondary>sallocT</secondary></indexterm>
<para><computeroutput>#define sallocT( T,  count)&#160;&#160;&#160;static_cast&lt;T*&gt;(alloca(sizeof(T) * count))</computeroutput></para></section>
</section>
</section>
