<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_stl_8hpp_source" xml:lang="en-US">
<title>stl.hpp</title>
<indexterm><primary>engine/src/stl/stl.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
2 
3 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacexpe">xpe</link>&#32;{
4 
5 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>core&#32;{
6 
7 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::basic_string&lt;char,&#32;std::char_traits&lt;char&gt;,&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">cMainAllocator&lt;char&gt;</link>&gt;&#32;<link linkend="_namespacexpe_1_1core_1a78ed6bb66afe2b4a776d73948fc8637c">string</link>;
8 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::basic_string&lt;char,&#32;std::char_traits&lt;char&gt;,&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">cHotAllocator&lt;char&gt;</link>&gt;&#32;<link linkend="_namespacexpe_1_1core_1acef017c0ff17c5aee0985b3aea112a90">hstring</link>;
9 
10 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_macro__build_8hpp_1a0697ee40f69dc5dab56d13131f4c4835">ENGINE_API</link>&#32;<link linkend="_namespacexpe_1_1core_1a5339d437e076788ee8b8217188685ee6">u64</link>&#32;<link linkend="_namespacexpe_1_1core_1a21084dba4baabe2a8da4ee568572f6da">Hash</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">str</link>);
11 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_macro__build_8hpp_1a0697ee40f69dc5dab56d13131f4c4835">ENGINE_API</link>&#32;<link linkend="_namespacexpe_1_1core_1a5339d437e076788ee8b8217188685ee6">u64</link>&#32;<link linkend="_namespacexpe_1_1core_1a21084dba4baabe2a8da4ee568572f6da">Hash</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacexpe_1_1core_1acef017c0ff17c5aee0985b3aea112a90">hstring</link>&amp;&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">str</link>);
12 
13 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::basic_stringstream&lt;char,&#32;std::char_traits&lt;char&gt;,&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">cMainAllocator&lt;char&gt;</link>&gt;&#32;<link linkend="_namespacexpe_1_1core_1a74c6d12f646e004c7b55a543ae9e8a37">stringstream</link>;
14 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::basic_stringstream&lt;char,&#32;std::char_traits&lt;char&gt;,&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">cHotAllocator&lt;char&gt;</link>&gt;&#32;<link linkend="_namespacexpe_1_1core_1ad25fb3781440baa5b332afa17ddfa6db">hstringstream</link>;
15 
16 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
17 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">vector</link>&#32;=&#32;std::vector&lt;T,&#32;cMainAllocator&lt;T&gt;&gt;;
18 
19 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
20 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacexpe_1_1core_1aa631f1df6bbff91816ab1ca55985ffce">hvector</link>&#32;=&#32;std::vector&lt;T,&#32;cHotAllocator&lt;T&gt;&gt;;
21 
22 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;Size&gt;
23 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacexpe_1_1core_1af1faf38160c359a3107783de1ccd0e0b">array</link>&#32;=&#32;std::array&lt;T,&#32;Size&gt;;
24 
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;K,&#32;<emphasis role="keyword">typename</emphasis>&#32;V&gt;
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacexpe_1_1core_1a7f4450b27bad0d3d2e66274aa3f6716d">map</link>&#32;=&#32;std::map&lt;K,&#32;V,&#32;std::equal_to&lt;K&gt;,&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">cMainAllocator&lt;std::pair&lt;K, V&gt;</link>&gt;&gt;;
27 
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;K,&#32;<emphasis role="keyword">typename</emphasis>&#32;V&gt;
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacexpe_1_1core_1ab3f968ad8c468067eb302c62f773e1d9">hmap</link>&#32;=&#32;std::map&lt;K,&#32;V,&#32;std::equal_to&lt;K&gt;,&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">cHotAllocator&lt;std::pair&lt;K, V&gt;</link>&gt;&gt;;
30 
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;K,&#32;<emphasis role="keyword">typename</emphasis>&#32;Comparator&#32;=&#32;std::less&lt;K&gt;&gt;
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacexpe_1_1core_1a8ac037afa106b7ff21a6eedf7b7e62bb">set</link>&#32;=&#32;std::set&lt;K,&#32;Comparator,&#32;cMainAllocator&lt;K&gt;&gt;;
33 
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;K,&#32;<emphasis role="keyword">typename</emphasis>&#32;Comparator&#32;=&#32;std::less&lt;K&gt;&gt;
35 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacexpe_1_1core_1a6438ef223e5f8612dd3bd7b85ca46d52">hset</link>&#32;=&#32;std::set&lt;K,&#32;Comparator,&#32;cHotAllocator&lt;K&gt;&gt;;
36 
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;K&gt;
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacexpe_1_1core_1a407f7eba91bc4f2413b2cd0f154dda91">unordered_set</link>&#32;=&#32;std::unordered_set&lt;K,&#32;std::hash&lt;K&gt;,&#32;std::equal_to&lt;K&gt;,&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">cMainAllocator&lt;K&gt;</link>&gt;;
39 
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;K&gt;
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacexpe_1_1core_1a5e5fc45c2a0c317ca0414d3287d523fd">hunordered_set</link>&#32;=&#32;std::unordered_set&lt;K,&#32;std::hash&lt;K&gt;,&#32;std::equal_to&lt;K&gt;,&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">cHotAllocator&lt;K&gt;</link>&gt;;
42 
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;K,&#32;<emphasis role="keyword">typename</emphasis>&#32;V&gt;
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacexpe_1_1core_1affe7ea2db8f29e4d85e6a1da779b90dd">unordered_map</link>&#32;=&#32;std::unordered_map&lt;K,&#32;V,&#32;std::hash&lt;K&gt;,&#32;std::equal_to&lt;K&gt;,&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">cMainAllocator&lt;std::pair&lt;K, V&gt;</link>&gt;&gt;;
45 
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;K,&#32;<emphasis role="keyword">typename</emphasis>&#32;V&gt;
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacexpe_1_1core_1a583fdad976e8a1cab53f96ba86055423">hunordered_map</link>&#32;=&#32;std::unordered_map&lt;K,&#32;V,&#32;std::hash&lt;K&gt;,&#32;std::equal_to&lt;K&gt;,&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">cHotAllocator&lt;std::pair&lt;K, V&gt;</link>&gt;&gt;;
48 
49 &#32;&#32;&#32;&#32;}
50 
51 }
</programlisting></section>
