<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_macro__debugbreak_8hpp_source" xml:lang="en-US">
<title>macro_debugbreak.hpp</title>
<indexterm><primary>engine/src/core/macro_debugbreak.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
2 
3 <emphasis role="preprocessor">#define&#32;debug_break&#32;__debugbreak</emphasis>
4 
5 <emphasis role="preprocessor">#else</emphasis>
6 
7 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
8 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;{
9 <emphasis role="preprocessor">#endif</emphasis>
10 
11 <emphasis role="preprocessor">#define&#32;DEBUG_BREAK_USE_TRAP_INSTRUCTION&#32;1</emphasis>
12 <emphasis role="preprocessor">#define&#32;DEBUG_BREAK_USE_BULTIN_TRAP&#32;&#32;&#32;&#32;&#32;&#32;2</emphasis>
13 <emphasis role="preprocessor">#define&#32;DEBUG_BREAK_USE_SIGTRAP&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;3</emphasis>
14 
15 <emphasis role="preprocessor">#if&#32;defined(__i386__)&#32;||&#32;defined(__x86_64__)</emphasis>
16 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;DEBUG_BREAK_IMPL&#32;DEBUG_BREAK_USE_TRAP_INSTRUCTION</emphasis>
17 __inline__&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;trap_instruction(<emphasis role="keywordtype">void</emphasis>)
18 {
19 &#32;&#32;&#32;&#32;__asm__&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;int&#32;$0x03&quot;</emphasis>);
20 }
21 <emphasis role="preprocessor">#elif&#32;defined(__thumb__)</emphasis>
22 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;DEBUG_BREAK_IMPL&#32;DEBUG_BREAK_USE_TRAP_INSTRUCTION</emphasis>
23 <link linkend="_macro__debugbreak_8hpp_1a372a9503e67211b07cd698712947e693">__attribute__</link>((always_inline))
24 __inline__&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;trap_instruction(<emphasis role="keywordtype">void</emphasis>)
25 {
26 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;See&#32;&apos;arm-linux-tdep.c&apos;&#32;in&#32;GDB&#32;source.</emphasis>
27 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Both&#32;instruction&#32;sequences&#32;below&#32;work.&#32;*/</emphasis>
28 <emphasis role="preprocessor">#if&#32;1</emphasis>
29 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;&apos;eabi_linux_thumb_le_breakpoint&apos;&#32;*/</emphasis>
30 &#32;&#32;&#32;&#32;__asm__&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;.inst&#32;0xde01&quot;</emphasis>);
31 <emphasis role="preprocessor">#else</emphasis>
32 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;&apos;eabi_linux_thumb2_le_breakpoint&apos;&#32;*/</emphasis>
33 &#32;&#32;&#32;&#32;__asm__&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;.inst.w&#32;0xf7f0a000&quot;</emphasis>);
34 <emphasis role="preprocessor">#endif</emphasis>
35 
36 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Known&#32;problem:</emphasis>
37 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;After&#32;a&#32;breakpoint&#32;hit,&#32;can&apos;t&#32;&apos;stepi&apos;,&#32;&apos;step&apos;,&#32;or&#32;&apos;continue&apos;&#32;in&#32;GDB.</emphasis>
38 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;&apos;step&apos;&#32;would&#32;keep&#32;getting&#32;stuck&#32;on&#32;the&#32;same&#32;instruction.</emphasis>
39 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*</emphasis>
40 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Workaround:&#32;use&#32;the&#32;new&#32;GDB&#32;commands&#32;&apos;debugbreak-step&apos;&#32;and</emphasis>
41 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;&apos;debugbreak-continue&apos;&#32;that&#32;become&#32;available</emphasis>
42 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;after&#32;you&#32;source&#32;the&#32;script&#32;from&#32;GDB:</emphasis>
43 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*</emphasis>
44 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;$&#32;gdb&#32;-x&#32;debugbreak-gdb.py&#32;&lt;...&#32;USUAL&#32;ARGUMENTS&#32;...&gt;</emphasis>
45 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*</emphasis>
46 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;&apos;debugbreak-step&apos;&#32;would&#32;jump&#32;over&#32;the&#32;breakpoint&#32;instruction&#32;with</emphasis>
47 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;roughly&#32;equivalent&#32;of:</emphasis>
48 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;(gdb)&#32;set&#32;$instruction_len&#32;=&#32;2</emphasis>
49 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;(gdb)&#32;tbreak&#32;*($pc&#32;+&#32;$instruction_len)</emphasis>
50 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;(gdb)&#32;jump&#32;&#32;&#32;*($pc&#32;+&#32;$instruction_len)</emphasis>
51 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
52 }
53 <emphasis role="preprocessor">#elif&#32;defined(__arm__)&#32;&amp;&amp;&#32;!defined(__thumb__)</emphasis>
54 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;DEBUG_BREAK_IMPL&#32;DEBUG_BREAK_USE_TRAP_INSTRUCTION</emphasis>
55 <link linkend="_macro__debugbreak_8hpp_1a372a9503e67211b07cd698712947e693">__attribute__</link>((always_inline))
56 __inline__&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;trap_instruction(<emphasis role="keywordtype">void</emphasis>)
57 {
58 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;See&#32;&apos;arm-linux-tdep.c&apos;&#32;in&#32;GDB&#32;source,</emphasis>
59 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;&apos;eabi_linux_arm_le_breakpoint&apos;&#32;*/</emphasis>
60 &#32;&#32;&#32;&#32;__asm__&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;.inst&#32;0xe7f001f0&quot;</emphasis>);
61 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Known&#32;problem:</emphasis>
62 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Same&#32;problem&#32;and&#32;workaround&#32;as&#32;Thumb&#32;mode&#32;*/</emphasis>
63 }
64 <emphasis role="preprocessor">#elif&#32;defined(__aarch64__)&#32;&amp;&amp;&#32;defined(__APPLE__)</emphasis>
65 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;DEBUG_BREAK_IMPL&#32;DEBUG_BREAK_USE_BULTIN_DEBUGTRAP</emphasis>
66 <emphasis role="preprocessor">#elif&#32;defined(__aarch64__)</emphasis>
67 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;DEBUG_BREAK_IMPL&#32;DEBUG_BREAK_USE_TRAP_INSTRUCTION</emphasis>
68 <link linkend="_macro__debugbreak_8hpp_1a372a9503e67211b07cd698712947e693">__attribute__</link>((always_inline))
69 __inline__&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;trap_instruction(<emphasis role="keywordtype">void</emphasis>)
70 {
71 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;See&#32;&apos;aarch64-tdep.c&apos;&#32;in&#32;GDB&#32;source,</emphasis>
72 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;&apos;aarch64_default_breakpoint&apos;&#32;*/</emphasis>
73 &#32;&#32;&#32;&#32;__asm__&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;.inst&#32;0xd4200000&quot;</emphasis>);
74 }
75 <emphasis role="preprocessor">#elif&#32;defined(__powerpc__)</emphasis>
76 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;PPC&#32;32&#32;or&#32;64-bit,&#32;big&#32;or&#32;little&#32;endian&#32;*/</emphasis>
77 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;DEBUG_BREAK_IMPL&#32;DEBUG_BREAK_USE_TRAP_INSTRUCTION</emphasis>
78 <link linkend="_macro__debugbreak_8hpp_1a372a9503e67211b07cd698712947e693">__attribute__</link>((always_inline))
79 __inline__&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;trap_instruction(<emphasis role="keywordtype">void</emphasis>)
80 {
81 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;See&#32;&apos;rs6000-tdep.c&apos;&#32;in&#32;GDB&#32;source,</emphasis>
82 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;&apos;rs6000_breakpoint&apos;&#32;*/</emphasis>
83 &#32;&#32;&#32;&#32;__asm__&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;.4byte&#32;0x7d821008&quot;</emphasis>);
84 
85 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Known&#32;problem:</emphasis>
86 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;After&#32;a&#32;breakpoint&#32;hit,&#32;can&apos;t&#32;&apos;stepi&apos;,&#32;&apos;step&apos;,&#32;or&#32;&apos;continue&apos;&#32;in&#32;GDB.</emphasis>
87 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;&apos;step&apos;&#32;stuck&#32;on&#32;the&#32;same&#32;instruction&#32;(&quot;twge&#32;r2,r2&quot;).</emphasis>
88 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*</emphasis>
89 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;The&#32;workaround&#32;is&#32;the&#32;same&#32;as&#32;ARM&#32;Thumb&#32;mode:&#32;use&#32;debugbreak-gdb.py</emphasis>
90 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;or&#32;manually&#32;jump&#32;over&#32;the&#32;instruction.&#32;*/</emphasis>
91 }
92 <emphasis role="preprocessor">#elif&#32;defined(__riscv)</emphasis>
93 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;RISC-V&#32;32&#32;or&#32;64-bit,&#32;whether&#32;the&#32;&quot;C&quot;&#32;extension</emphasis>
94 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;for&#32;compressed,&#32;16-bit&#32;instructions&#32;are&#32;supported&#32;or&#32;not&#32;*/</emphasis>
95 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;DEBUG_BREAK_IMPL&#32;DEBUG_BREAK_USE_TRAP_INSTRUCTION</emphasis>
96 <link linkend="_macro__debugbreak_8hpp_1a372a9503e67211b07cd698712947e693">__attribute__</link>((always_inline))
97 __inline__&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;trap_instruction(<emphasis role="keywordtype">void</emphasis>)
98 {
99 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;See&#32;&apos;riscv-tdep.c&apos;&#32;in&#32;GDB&#32;source,</emphasis>
100 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;&apos;riscv_sw_breakpoint_from_kind&apos;&#32;*/</emphasis>
101 &#32;&#32;&#32;&#32;__asm__&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;.4byte&#32;0x00100073&quot;</emphasis>);
102 }
103 <emphasis role="preprocessor">#else</emphasis>
104 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;DEBUG_BREAK_IMPL&#32;DEBUG_BREAK_USE_SIGTRAP</emphasis>
105 <emphasis role="preprocessor">#endif</emphasis>
106 
107 
108 <emphasis role="preprocessor">#ifndef&#32;DEBUG_BREAK_IMPL</emphasis>
109 <emphasis role="preprocessor">#error&#32;&quot;Debugbreak&#32;is&#32;not&#32;supported&#32;on&#32;this&#32;target&quot;</emphasis>
110 <emphasis role="preprocessor">#elif&#32;DEBUG_BREAK_IMPL&#32;==&#32;DEBUG_BREAK_USE_TRAP_INSTRUCTION</emphasis>
111 <link linkend="_macro__debugbreak_8hpp_1a372a9503e67211b07cd698712947e693">__attribute__</link>((always_inline))
112 __inline__&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;debug_break(<emphasis role="keywordtype">void</emphasis>)
113 {
114 &#32;&#32;&#32;&#32;trap_instruction();
115 }
116 <emphasis role="preprocessor">#elif&#32;DEBUG_BREAK_IMPL&#32;==&#32;DEBUG_BREAK_USE_BULTIN_DEBUGTRAP</emphasis>
117 <link linkend="_macro__debugbreak_8hpp_1a372a9503e67211b07cd698712947e693">__attribute__</link>((always_inline))
118 __inline__&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;debug_break(<emphasis role="keywordtype">void</emphasis>)
119 {
120 &#32;&#32;&#32;&#32;__builtin_debugtrap();
121 }
122 <emphasis role="preprocessor">#elif&#32;DEBUG_BREAK_IMPL&#32;==&#32;DEBUG_BREAK_USE_BULTIN_TRAP</emphasis>
123 <link linkend="_macro__debugbreak_8hpp_1a372a9503e67211b07cd698712947e693">__attribute__</link>((always_inline))
124 __inline__&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;debug_break(<emphasis role="keywordtype">void</emphasis>)
125 {
126 &#32;&#32;&#32;&#32;__builtin_trap();
127 }
128 <emphasis role="preprocessor">#elif&#32;DEBUG_BREAK_IMPL&#32;==&#32;DEBUG_BREAK_USE_SIGTRAP</emphasis>
129 <emphasis role="preprocessor">#include&#32;&lt;signal.h&gt;</emphasis>
130 <link linkend="_macro__debugbreak_8hpp_1a372a9503e67211b07cd698712947e693">__attribute__</link>((always_inline))
131 __inline__&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;debug_break(<emphasis role="keywordtype">void</emphasis>)
132 {
133 &#32;&#32;&#32;&#32;raise(SIGTRAP);
134 }
135 <emphasis role="preprocessor">#else</emphasis>
136 <emphasis role="preprocessor">#error&#32;&quot;invalid&#32;DEBUG_BREAK_IMPL&#32;value&quot;</emphasis>
137 <emphasis role="preprocessor">#endif</emphasis>
138 
139 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
140 }
141 <emphasis role="preprocessor">#endif</emphasis>
142 
143 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;ifdef&#32;_MSC_VER&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
