<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_task__manager_8hpp_source" xml:lang="en-US">
<title>task_manager.hpp</title>
<indexterm><primary>engine/src/core/task_manager.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
2 
3 <emphasis role="preprocessor">#include&#32;&lt;PxPhysicsAPI.h&gt;</emphasis>
4 
5 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacexpe">xpe</link>&#32;{
6 
7 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>core&#32;{
8 
9 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_macro__build_8hpp_1a0697ee40f69dc5dab56d13131f4c4835">ENGINE_API</link>&#32;<link linkend="_structxpe_1_1core_1_1s_task">sTask</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classxpe_1_1core_1_1c_object">cObject</link>
10 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_structxpe_1_1core_1_1s_task_1a2504f45dc46cedefee9d942004e12e06">eType</link>&#32;:&#32;<link linkend="_namespacexpe_1_1core_1a13fec7f69dcb34583a9c88a8c2d85ab6">u8</link>
12 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;THREAD_POOL&#32;=&#32;0,
14 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AUDIO&#32;=&#32;1,
15 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NETWORK&#32;=&#32;2,
16 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ANIMATION&#32;=&#32;3,
17 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PHYSICS&#32;=&#32;4,
18 
19 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacexpe_1_1core_1aa255cadb2be4fc02d14cee6e1da73ac9a5b39c8b553c821e7cddc6da64b5bd2ee">DEFAULT</link>&#32;=&#32;THREAD_POOL
20 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
21 
22 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structxpe_1_1core_1_1s_task_1a2504f45dc46cedefee9d942004e12e06">eType</link>&#32;Type&#32;=&#32;eType::DEFAULT;
23 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::function&lt;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">void</link>()&gt;&#32;Todo&#32;=&#32;[](){};
24 
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structxpe_1_1core_1_1s_task_1a98a32f166503d07754051ffbb0de4f77">sTask</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structxpe_1_1core_1_1s_task_1a72b2582e5dc7cceb42a92214c20b438c">sTask</link>(<link linkend="_structxpe_1_1core_1_1s_task_1a2504f45dc46cedefee9d942004e12e06">eType</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">type</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;std::function&lt;<emphasis role="keywordtype">void</emphasis>()&gt;&amp;&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">todo</link>)&#32;:&#32;Type(<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">type</link>),&#32;Todo(<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">todo</link>)&#32;{}
27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
28 
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_macro__build_8hpp_1a0697ee40f69dc5dab56d13131f4c4835">ENGINE_API</link>&#32;<link linkend="_structxpe_1_1core_1_1s_task_queue">sTaskQueue</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_structxpe_1_1core_1_1s_task">sTask</link>
30 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">vector&lt;sTask&gt;</link>&#32;<link linkend="_structxpe_1_1core_1_1s_task_queue_1afb918d59e8c049ce1b5ca93f68dd245d">Tasks</link>;
32 
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structxpe_1_1core_1_1s_task_queue">sTaskQueue</link>();
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structxpe_1_1core_1_1s_task_queue">sTaskQueue</link>(<link linkend="_structxpe_1_1core_1_1s_task_1a2504f45dc46cedefee9d942004e12e06">eType</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">type</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">vector&lt;sTask&gt;</link>&amp;&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">tasks</link>&#32;=&#32;{});
35 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
36 
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_macro__build_8hpp_1a0697ee40f69dc5dab56d13131f4c4835">ENGINE_API</link>&#32;<link linkend="_classxpe_1_1core_1_1c_task_dispatcher">cTaskDispatcher</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classxpe_1_1core_1_1c_object">cObject</link>
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
39 
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classxpe_1_1core_1_1c_task_dispatcher">cTaskDispatcher</link>(<link linkend="_namespacexpe_1_1core_1aa507c1ad5e6e22c6561d60671555dafc">u32</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">workerSize</link>,&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">usize</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">taskBufferSize</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">name</link>,&#32;<link linkend="_classxpe_1_1core_1_1c_thread_1a714e0fbeefe921f4fbe195de023a4fa1">cThread::ePriority</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">priority</link>);
42 
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;executes&#32;single&#32;task&#32;in&#32;a&#32;single&#32;worker&#32;thread</emphasis>
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Dispatch(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structxpe_1_1core_1_1s_task">sTask</link>&amp;&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">task</link>);
45 
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;executes&#32;multiple&#32;tasks&#32;with&#32;multiple&#32;amount&#32;of&#32;workers&#32;per&#32;task</emphasis>
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;taskSize&#32;-&#32;count&#32;of&#32;inner&#32;tasks&#32;inside&#32;single&#32;task</emphasis>
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;tasksPerThread&#32;-&#32;count&#32;of&#32;tasks&#32;for&#32;each&#32;worker&#32;thread</emphasis>
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Dispatch(<link linkend="_namespacexpe_1_1core_1aa507c1ad5e6e22c6561d60671555dafc">u32</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">tasksPerThread</link>,&#32;<link linkend="_namespacexpe_1_1core_1aa507c1ad5e6e22c6561d60671555dafc">u32</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">taskSize</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structxpe_1_1core_1_1s_task">sTask</link>&amp;&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">task</link>);
50 
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsBusy();
52 
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_namespacexpe_1_1core_1aa507c1ad5e6e22c6561d60671555dafc">u32</link>&#32;GetWorkerCount()&#32;<emphasis role="keyword">const</emphasis>;
54 
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Wait();
56 
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;wakes&#32;only&#32;one&#32;worker</emphasis>
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;allows&#32;caller-thread&#32;to&#32;be&#32;rescheduled&#32;by&#32;OS</emphasis>
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Poll();
61 
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;InitThread(<link linkend="_namespacexpe_1_1core_1aa507c1ad5e6e22c6561d60671555dafc">u32</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">workerId</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">name</link>,&#32;<link linkend="_classxpe_1_1core_1_1c_thread_1a714e0fbeefe921f4fbe195de023a4fa1">cThread::ePriority</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">priority</link>);
63 
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">cRingBuffer&lt;sTask&gt;</link>&#32;<link linkend="_classxpe_1_1core_1_1c_task_dispatcher_1a6b88d57d92d2d9745c3df4d684edea50">m_TaskBuffer</link>;
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::condition_variable&#32;<link linkend="_classxpe_1_1core_1_1c_task_dispatcher_1ab138311f4c5844fc1ffdd9b575c5e057">m_WakeCondition</link>;
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::mutex&#32;<link linkend="_classxpe_1_1core_1_1c_task_dispatcher_1aeed8047b981e99e67ae3025006d586e9">m_WakeMutex</link>;
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacexpe_1_1core_1a5339d437e076788ee8b8217188685ee6">u64</link>&#32;<link linkend="_classxpe_1_1core_1_1c_task_dispatcher_1a122a3bb1bfa10ac948f995fe3a5c820e">m_TasksTodo</link>;
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::atomic&lt;u64&gt;&#32;<link linkend="_classxpe_1_1core_1_1c_task_dispatcher_1a2a1a61cf6c2caea1de30583c0146f7b5">m_TasksDone</link>;
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacexpe_1_1core_1aa507c1ad5e6e22c6561d60671555dafc">u32</link>&#32;<link linkend="_classxpe_1_1core_1_1c_task_dispatcher_1a932baf4d6c1c03c8968a8129da4ab6d1">m_WorkerCount</link>;
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
71 
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_macro__build_8hpp_1a0697ee40f69dc5dab56d13131f4c4835">ENGINE_API</link>&#32;<link linkend="_classxpe_1_1core_1_1c_simulation_dispatcher">cSimulationDispatcher</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classxpe_1_1core_1_1c_task_dispatcher">cTaskDispatcher</link>,&#32;<emphasis role="keyword">public</emphasis>&#32;physx::PxCpuDispatcher&#32;{
73 
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classxpe_1_1core_1_1c_simulation_dispatcher_1a03402af9a4692af19df4f4cf1fb06f69">cSimulationDispatcher</link>(<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">usize</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">workerSize</link>,&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">usize</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">taskBufferSize</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">name</link>,&#32;<link linkend="_classxpe_1_1core_1_1c_thread_1a714e0fbeefe921f4fbe195de023a4fa1">cThread::ePriority</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">priority</link>)
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classxpe_1_1core_1_1c_task_dispatcher">cTaskDispatcher</link>(<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">workerSize</link>,&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">taskBufferSize</link>,&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">name</link>,&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">priority</link>)&#32;{}
77 
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classxpe_1_1core_1_1c_simulation_dispatcher_1a493289526bd21e68c177c08468d555f4">~cSimulationDispatcher</link>()&#32;<emphasis role="keyword">override</emphasis>;
79 
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;submitTask(physx::PxBaseTask&amp;&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">task</link>)&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keyword">final</emphasis>;
81 
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">uint32_t</link>&#32;getWorkerCount()&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">const</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">override</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">final</link>;
83 
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
85 
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">class</link>&#32;<link linkend="_macro__build_8hpp_1a0697ee40f69dc5dab56d13131f4c4835">ENGINE_API</link>&#32;<link linkend="_classxpe_1_1core_1_1c_task_manager">cTaskManager</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">final</link>&#32;{
87 
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Init();
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Free();
91 
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;SubmitTask(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structxpe_1_1core_1_1s_task">sTask</link>&amp;&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">task</link>);
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;SubmitTask(<link linkend="_namespacexpe_1_1core_1aa507c1ad5e6e22c6561d60671555dafc">u32</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">tasksPerThread</link>,&#32;<link linkend="_namespacexpe_1_1core_1aa507c1ad5e6e22c6561d60671555dafc">u32</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">totalTasks</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structxpe_1_1core_1_1s_task">sTask</link>&amp;&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">task</link>);
94 
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classxpe_1_1core_1_1c_simulation_dispatcher">cSimulationDispatcher</link>*&#32;GetSimulationDispatcher();
96 
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classxpe_1_1core_1_1c_task_dispatcher">cTaskDispatcher</link>*&#32;s_AudioDispatcher;
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classxpe_1_1core_1_1c_task_dispatcher">cTaskDispatcher</link>*&#32;s_NetworkDispatcher;
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classxpe_1_1core_1_1c_simulation_dispatcher">cSimulationDispatcher</link>*&#32;s_SimulationDispatcher;
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classxpe_1_1core_1_1c_task_dispatcher">cTaskDispatcher</link>*&#32;s_ThreadPoolDispatcher;
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
103 
104 &#32;&#32;&#32;&#32;}
105 
106 }
</programlisting></section>
