<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_input__manager_8hpp_source" xml:lang="en-US">
<title>input_manager.hpp</title>
<indexterm><primary>engine/src/core/input_manager.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
2 
3 <emphasis role="preprocessor">#include&#32;&lt;<link linkend="_events_8hpp">core/events.hpp</link>&gt;</emphasis>
4 
5 <emphasis role="preprocessor">#define&#32;AddWindowClosed(clazz,&#32;priority)&#32;xpe::core::cEventManager::Get().WindowClosedEvents.AddEvent(this,&#32;xpe::core::OnWindowClosed&lt;clazz&gt;,&#32;priority)</emphasis>
6 <emphasis role="preprocessor">#define&#32;AddWindowResized(clazz,&#32;priority)&#32;xpe::core::cEventManager::Get().WindowResizedEvents.AddEvent(this,&#32;xpe::core::OnWindowResized&lt;clazz&gt;,&#32;priority)</emphasis>
7 <emphasis role="preprocessor">#define&#32;AddWindowFrameResized(clazz,&#32;priority)&#32;xpe::core::cEventManager::Get().WindowFrameResizedEvents.AddEvent(this,&#32;xpe::core::OnWindowFrameResized&lt;clazz&gt;,&#32;priority)</emphasis>
8 <emphasis role="preprocessor">#define&#32;AddWindowRatioChanged(clazz,&#32;priority)&#32;xpe::core::cEventManager::Get().WindowRatioChangedEvents.AddEvent(this,&#32;xpe::core::OnWindowRatioChanged&lt;clazz&gt;,&#32;priority)</emphasis>
9 
10 <emphasis role="preprocessor">#define&#32;AddKeyPressed(clazz,&#32;priority)&#32;xpe::core::cEventManager::Get().KeyPressedEvents.AddEvent(this,&#32;xpe::core::OnKeyPressed&lt;clazz&gt;,&#32;priority)</emphasis>
11 <emphasis role="preprocessor">#define&#32;AddKeyRelease(clazz,&#32;priority)&#32;xpe::core::cEventManager::Get().KeyReleasedEvents.AddEvent(this,&#32;xpe::core::OnKeyReleased&lt;clazz&gt;,&#32;priority)</emphasis>
12 <emphasis role="preprocessor">#define&#32;AddKeyHold(clazz,&#32;priority)&#32;xpe::core::cEventManager::Get().KeyHoldEvents.AddEvent(this,&#32;xpe::core::OnKeyHold&lt;clazz&gt;,&#32;priority)</emphasis>
13 
14 <emphasis role="preprocessor">#define&#32;AddCursorMove(clazz,&#32;priority)&#32;xpe::core::cEventManager::Get().CursorMovedEvents.AddEvent(this,&#32;xpe::core::OnCursorMoved&lt;clazz&gt;,&#32;priority)</emphasis>
15 
16 <emphasis role="preprocessor">#define&#32;AddScrollChanged(clazz,&#32;priority)&#32;xpe::core::cEventManager::Get().ScrollChangedEvents.AddEvent(this,&#32;xpe::core::OnScrollChanged&lt;clazz&gt;,&#32;priority)</emphasis>
17 
18 <emphasis role="preprocessor">#define&#32;RemoveWindowClose()&#32;xpe::core::cEventManager::Get().WindowClosedEvents.RemoveEvent(this)</emphasis>
19 <emphasis role="preprocessor">#define&#32;RemoveWindowFrameResized()&#32;xpe::core::cEventManager::Get().WindowFrameResizedEvents.RemoveEvent(this)</emphasis>
20 <emphasis role="preprocessor">#define&#32;RemoveWindowRatioChanged()&#32;xpe::core::cEventManager::Get().WindowRatioChangedEvents.RemoveEvent(this)</emphasis>
21 
22 <emphasis role="preprocessor">#define&#32;RemoveKeyPressed()&#32;xpe::core::cEventManager::Get().KeyPressedEvents.RemoveEvent(this)</emphasis>
23 <emphasis role="preprocessor">#define&#32;RemoveKeyRelease()&#32;xpe::core::cEventManager::Get().KeyReleasedEvents.RemoveEvent(this)</emphasis>
24 <emphasis role="preprocessor">#define&#32;RemoveKeyHold()&#32;xpe::core::cEventManager::Get().KeyHoldEvents.RemoveEvent(this)</emphasis>
25 
26 <emphasis role="preprocessor">#define&#32;RemoveCursorMove()&#32;xpe::core::cEventManager::Get().CursorMovedEvents.RemoveEvent(this)</emphasis>
27 
28 <emphasis role="preprocessor">#define&#32;RemoveScrollChanged()&#32;xpe::core::cEventManager::Get().ScrollChangedEvents.RemoveEvent(this)</emphasis>
29 
30 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacexpe">xpe</link>&#32;{
31 
32 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>core&#32;{
33 
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_macro__build_8hpp_1a0697ee40f69dc5dab56d13131f4c4835">ENGINE_API</link>&#32;<link linkend="_structxpe_1_1core_1_1s_mouse_cursor">sMouseCursor</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">final</link>&#32;{
35 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glm::vec2&#32;Position&#32;=&#32;{&#32;0,&#32;0&#32;};
36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glm::vec2&#32;Delta&#32;=&#32;{&#32;0,&#32;0&#32;};
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
38 
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_macro__build_8hpp_1a0697ee40f69dc5dab56d13131f4c4835">ENGINE_API</link>&#32;<link linkend="_classxpe_1_1core_1_1c_input_manager">cInputManager</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">final</link>&#32;{
40 
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Init();
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Free();
44 
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;CaptureCursor();
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;CaptureCursor(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_namespacexpe_1_1core_1a49526f1e6a80726936b0b54c8ac10411">x</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">y</link>);
47 
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;KeyPressed(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacexpe_1_1core_1ae6ef6570753015ed6148c228eaac7bf8">eKey</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">key</link>);
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;KeyReleased(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacexpe_1_1core_1ae6ef6570753015ed6148c228eaac7bf8">eKey</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">key</link>);
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;KeyHold(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacexpe_1_1core_1ae6ef6570753015ed6148c228eaac7bf8">eKey</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">key</link>);
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_structxpe_1_1core_1_1s_key_state">sKeyState</link>&#32;GetKeyState(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacexpe_1_1core_1ae6ef6570753015ed6148c228eaac7bf8">eKey</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">key</link>);
52 
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;MousePressed(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacexpe_1_1core_1a2b9db99325643f54e77f1b26c03dfa62">eMouse</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">mouse</link>);
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;MouseReleased(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacexpe_1_1core_1a2b9db99325643f54e77f1b26c03dfa62">eMouse</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">mouse</link>);
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;MouseHold(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacexpe_1_1core_1a2b9db99325643f54e77f1b26c03dfa62">eMouse</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">mouse</link>);
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_structxpe_1_1core_1_1s_mouse_state">sMouseState</link>&#32;GetMouseState(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacexpe_1_1core_1a2b9db99325643f54e77f1b26c03dfa62">eMouse</link>&#32;<link linkend="_namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde">mouse</link>);
57 
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structxpe_1_1core_1_1s_mouse_cursor">sMouseCursor</link>&amp;&#32;<link linkend="_classxpe_1_1core_1_1c_input_manager_1acb8d964541b09642226c3d11c298a8e6">GetMouseCursor</link>()&#32;{
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s_Cursor;
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
61 
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;InitWindowCallbacks();
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;InitKeyCallbacks();
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;InitMouseCallbacks();
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;InitCursorCallbacks();
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;InitScrollCallbacks();
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;InitCharCallbacks();
69 
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_structxpe_1_1core_1_1s_mouse_cursor">sMouseCursor</link>&#32;s_Cursor;
72 
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
74 
75 &#32;&#32;&#32;&#32;}
76 
77 }
</programlisting></section>
