.TH "xpe::render::sShaderStage" 3 "Version 0.1" "XPE-Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
xpe::render::sShaderStage
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <shader\&.hpp>\fP
.PP
Inherits \fBxpe::render::sResource\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum class \fBeType\fP { \fBNONE\fP = -1, \fBVERTEX\fP = 0, \fBPIXEL\fP = 1, \fBGEOMETRY\fP = 2, \fBCOMPUTE\fP = 3 }"
.br
.in -1c

Public Types inherited from \fBxpe::render::sResource\fP
.in +1c
.ti -1c
.RI "enum class \fBeViewType\fP { \fBNONE\fP, \fBDEPTH_STENCIL\fP, \fBRENDER_TARGET\fP, \fBSRV\fP, \fBUAV\fP }"
.br
.ti -1c
.RI "enum class \fBeMapType\fP { \fBREAD\fP, \fBWRITE\fP, \fBREAD_WRITE\fP, \fBWRITE_NO_OVERWRITE\fP, \fBWRITE_DISCARD\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBsShaderStage\fP ()=\fBdefault\fP"
.br
.ti -1c
.RI "\fBsShaderStage\fP (\fBu64\fP \fBid\fP, \fBeType\fP \fBtype\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSetBuffer\fP (\fBsBuffer\fP *\fBbuffer\fP, \fBu32\fP \fBslot\fP=\fBK_SLOT_DEFAULT\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSetTexture\fP (\fBsTexture\fP *\fBtexture\fP, \fBu32\fP \fBslot\fP=\fBK_SLOT_DEFAULT\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBSetSampler\fP (\fBsSampler\fP *\fBsampler\fP, \fBu32\fP \fBslot\fP=\fBK_SLOT_DEFAULT\fP)"
.br
.in -1c

Public Member Functions inherited from \fBxpe::core::cObject\fP
.in +1c
.ti -1c
.RI "\fBvoid\fP * \fBoperator new\fP (\fBusize\fP \fBbyteSize\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator delete\fP (\fBvoid\fP *\fBaddress\fP)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBu64\fP \fBID\fP"
.br
.ti -1c
.RI "\fBeType\fP \fBType\fP"
.br
.ti -1c
.RI "\fBsBlob\fP \fBBlob\fP"
.br
.ti -1c
.RI "\fBuword\fP \fBFlag\fP = 0"
.br
.ti -1c
.RI "\fBbool\fP \fBCompiled\fP = \fBfalse\fP"
.br
.ti -1c
.RI "\fBstring\fP \fBProfile\fP"
.br
.ti -1c
.RI "\fBstring\fP \fBEntryPoint\fP"
.br
.ti -1c
.RI "\fBstring\fP \fBSource\fP"
.br
.ti -1c
.RI "\fBvector\fP< \fBsBuffer\fP * > \fBBuffers\fP"
.br
.ti -1c
.RI "\fBvector\fP< \fBsTexture\fP * > \fBTextures\fP"
.br
.ti -1c
.RI "\fBvector\fP< \fBsSampler\fP * > \fBSamplers\fP"
.br
.in -1c

Public Attributes inherited from \fBxpe::render::sResource\fP
.in +1c
.ti -1c
.RI "\fBvoid\fP * \fBInstance\fP = \fBnullptr\fP"
.br
.ti -1c
.RI "\fBvoid\fP * \fBViewInstance\fP = \fBnullptr\fP"
.br
.ti -1c
.RI "\fBeViewType\fP \fBViewType\fP = \fBeViewType::NONE\fP"
.br
.in -1c
.SH "Member Enumeration Documentation"
.PP 
.SS "\fBenum\fP \fBclass\fP \fBxpe::render::sShaderStage::eType\fP\fR [strong]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINONE \fP\fP
.TP
\fB\fIVERTEX \fP\fP
.TP
\fB\fIPIXEL \fP\fP
.TP
\fB\fIGEOMETRY \fP\fP
.TP
\fB\fICOMPUTE \fP\fP
.SH "Constructor & Destructor Documentation"
.PP 
.SS "xpe::render::sShaderStage::sShaderStage ()\fR [default]\fP"

.SS "xpe::render::sShaderStage::sShaderStage (\fBu64\fP id, \fBeType\fP type)\fR [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "\fBvoid\fP xpe::render::sShaderStage::SetBuffer (\fBsBuffer\fP * buffer, \fBu32\fP slot = \fR\fBK_SLOT_DEFAULT\fP\fP)\fR [inline]\fP"

.SS "\fBvoid\fP xpe::render::sShaderStage::SetSampler (\fBsSampler\fP * sampler, \fBu32\fP slot = \fR\fBK_SLOT_DEFAULT\fP\fP)\fR [inline]\fP"

.SS "\fBvoid\fP xpe::render::sShaderStage::SetTexture (\fBsTexture\fP * texture, \fBu32\fP slot = \fR\fBK_SLOT_DEFAULT\fP\fP)\fR [inline]\fP"

.SH "Member Data Documentation"
.PP 
.SS "\fBsBlob\fP xpe::render::sShaderStage::Blob"

.SS "\fBvector\fP<\fBsBuffer\fP*> xpe::render::sShaderStage::Buffers"

.SS "\fBbool\fP xpe::render::sShaderStage::Compiled = \fBfalse\fP"

.SS "\fBstring\fP xpe::render::sShaderStage::EntryPoint"

.SS "\fBuword\fP xpe::render::sShaderStage::Flag = 0"

.SS "\fBu64\fP xpe::render::sShaderStage::ID"

.SS "\fBstring\fP xpe::render::sShaderStage::Profile"

.SS "\fBvector\fP<\fBsSampler\fP*> xpe::render::sShaderStage::Samplers"

.SS "\fBstring\fP xpe::render::sShaderStage::Source"

.SS "\fBvector\fP<\fBsTexture\fP*> xpe::render::sShaderStage::Textures"

.SS "\fBeType\fP xpe::render::sShaderStage::Type"


.SH "Author"
.PP 
Generated automatically by Doxygen for XPE-Engine from the source code\&.
