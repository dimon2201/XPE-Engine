.TH "xpe::core" 3 "Version 0.1" "XPE-Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
xpe::core
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBcApp\fP"
.br
.ti -1c
.RI "class \fBcEventBuffer\fP"
.br
.ti -1c
.RI "class \fBcEventManager\fP"
.br
.ti -1c
.RI "class \fBcFileManager\fP"
.br
.ti -1c
.RI "class \fBcHardwareManager\fP"
.br
.ti -1c
.RI "class \fBcHotAllocator\fP"
.br
.ti -1c
.RI "class \fBcHotObject\fP"
.br
.ti -1c
.RI "class \fBcHotScope\fP"
.br
.ti -1c
.RI "class \fBcInputManager\fP"
.br
.ti -1c
.RI "class \fBcLogManager\fP"
.br
.ti -1c
.RI "class \fBcMainAllocator\fP"
.br
.ti -1c
.RI "class \fBcMemoryManager\fP"
.br
.ti -1c
.RI "class \fBcMemoryPool\fP"
.br
.ti -1c
.RI "class \fBcMemoryPoolStack\fP"
.br
.ti -1c
.RI "class \fBcMemoryStackManager\fP"
.br
.ti -1c
.RI "class \fBcObject\fP"
.br
.ti -1c
.RI "class \fBcRingBuffer\fP"
.br
.ti -1c
.RI "class \fBcScope\fP"
.br
.ti -1c
.RI "class \fBcSimulationDispatcher\fP"
.br
.ti -1c
.RI "class \fBcTaskDispatcher\fP"
.br
.ti -1c
.RI "class \fBcTaskManager\fP"
.br
.ti -1c
.RI "class \fBcThread\fP"
.br
.ti -1c
.RI "class \fBcTime\fP"
.br
.ti -1c
.RI "class \fBcTimeManager\fP"
.br
.ti -1c
.RI "class \fBcWindowManager\fP"
.br
.ti -1c
.RI "struct \fBsAppConfig\fP"
.br
.ti -1c
.RI "struct \fBsCpuStats\fP"
.br
.ti -1c
.RI "struct \fBsEvent\fP"
.br
.ti -1c
.RI "struct \fBsGamepadState\fP"
.br
.ti -1c
.RI "struct \fBsGpuStats\fP"
.br
.ti -1c
.RI "struct \fBsKeyState\fP"
.br
.ti -1c
.RI "struct \fBsLoggerDescriptor\fP"
.br
.ti -1c
.RI "struct \fBsMemoryPoolAllocation\fP"
.br
.ti -1c
.RI "struct \fBsMemoryStats\fP"
.br
.ti -1c
.RI "struct \fBsMouseCursor\fP"
.br
.ti -1c
.RI "struct \fBsMouseState\fP"
.br
.ti -1c
.RI "struct \fBsObserver\fP"
.br
.ti -1c
.RI "struct \fBsObserverSampleCount\fP"
.br
.ti -1c
.RI "struct \fBsObserverWindowRatio\fP"
.br
.ti -1c
.RI "struct \fBsStackAllocator\fP"
.br
.ti -1c
.RI "struct \fBsStackTypedAllocator\fP"
.br
.ti -1c
.RI "struct \fBsTask\fP"
.br
.ti -1c
.RI "struct \fBsTaskQueue\fP"
.br
.ti -1c
.RI "struct \fBsWindow\fP"
.br
.ti -1c
.RI "struct \fBsWindowDescriptor\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "\fBusing\fP \fBLogSinkColor\fP = spdlog::sinks::stdout_color_sink_mt"
.br
.ti -1c
.RI "\fBusing\fP \fBErrorSinkColor\fP = spdlog::sinks::stderr_color_sink_mt"
.br
.ti -1c
.RI "\fBusing\fP \fBFileSink\fP = spdlog::sinks::basic_file_sink_mt"
.br
.ti -1c
.RI "\fBusing\fP \fBSink\fP = spdlog::sink_ptr"
.br
.ti -1c
.RI "\fBtypedef\fP \fBconst\fP std::chrono::duration< \fBdouble\fP, std::milli > \fBTimeMillis\fP"
.br
.ti -1c
.RI "\fBusing\fP \fBu8\fP = \fBuint8_t\fP"
.br
.ti -1c
.RI "\fBusing\fP \fBs8\fP = \fBint8_t\fP"
.br
.ti -1c
.RI "\fBusing\fP \fBu16\fP = \fBuint16_t\fP"
.br
.ti -1c
.RI "\fBusing\fP \fBs16\fP = \fBint16_t\fP"
.br
.ti -1c
.RI "\fBusing\fP \fBu32\fP = \fBuint32_t\fP"
.br
.ti -1c
.RI "\fBusing\fP \fBs32\fP = \fBint32_t\fP"
.br
.ti -1c
.RI "\fBusing\fP \fBu64\fP = \fBuint64_t\fP"
.br
.ti -1c
.RI "\fBusing\fP \fBs64\fP = \fBint64_t\fP"
.br
.ti -1c
.RI "\fBusing\fP \fBf32\fP = \fBfloat\fP"
.br
.ti -1c
.RI "\fBusing\fP \fBf64\fP = \fBdouble\fP"
.br
.ti -1c
.RI "\fBusing\fP \fBdword\fP = \fBu32\fP"
.br
.ti -1c
.RI "\fBusing\fP \fBqword\fP = \fBu64\fP"
.br
.ti -1c
.RI "\fBusing\fP \fBBoolean\fP = \fBu32\fP"
.br
.ti -1c
.RI "\fBtypedef\fP std::basic_string< \fBchar\fP, std::char_traits< \fBchar\fP >, \fBcMainAllocator\fP< \fBchar\fP > > \fBstring\fP"
.br
.ti -1c
.RI "\fBtypedef\fP std::basic_string< \fBchar\fP, std::char_traits< \fBchar\fP >, \fBcHotAllocator\fP< \fBchar\fP > > \fBhstring\fP"
.br
.ti -1c
.RI "\fBtypedef\fP std::basic_stringstream< \fBchar\fP, std::char_traits< \fBchar\fP >, \fBcMainAllocator\fP< \fBchar\fP > > \fBstringstream\fP"
.br
.ti -1c
.RI "\fBtypedef\fP std::basic_stringstream< \fBchar\fP, std::char_traits< \fBchar\fP >, \fBcHotAllocator\fP< \fBchar\fP > > \fBhstringstream\fP"
.br
.ti -1c
.RI "template<\fBtypename\fP \fBT\fP > \fBusing\fP \fBvector\fP = std::vector<\fBT\fP, \fBcMainAllocator\fP<\fBT\fP>>"
.br
.ti -1c
.RI "template<\fBtypename\fP \fBT\fP > \fBusing\fP \fBhvector\fP = std::vector<\fBT\fP, \fBcHotAllocator\fP<\fBT\fP>>"
.br
.ti -1c
.RI "template<\fBtypename\fP \fBT\fP , \fBsize_t\fP Size> \fBusing\fP \fBarray\fP = std::array<\fBT\fP, Size>"
.br
.ti -1c
.RI "template<\fBtypename\fP \fBK\fP , \fBtypename\fP \fBV\fP > \fBusing\fP \fBmap\fP = std::map<\fBK\fP, \fBV\fP, std::equal_to<\fBK\fP>, \fBcMainAllocator\fP<std::pair<\fBK\fP, \fBV\fP>>>"
.br
.ti -1c
.RI "template<\fBtypename\fP \fBK\fP , \fBtypename\fP \fBV\fP > \fBusing\fP \fBhmap\fP = std::map<\fBK\fP, \fBV\fP, std::equal_to<\fBK\fP>, \fBcHotAllocator\fP<std::pair<\fBK\fP, \fBV\fP>>>"
.br
.ti -1c
.RI "template<\fBtypename\fP \fBK\fP , \fBtypename\fP \fBComparator\fP  = std::less<K>> \fBusing\fP \fBset\fP = std::set<\fBK\fP, \fBComparator\fP, \fBcMainAllocator\fP<\fBK\fP>>"
.br
.ti -1c
.RI "template<\fBtypename\fP \fBK\fP , \fBtypename\fP \fBComparator\fP  = std::less<K>> \fBusing\fP \fBhset\fP = std::set<\fBK\fP, \fBComparator\fP, \fBcHotAllocator\fP<\fBK\fP>>"
.br
.ti -1c
.RI "template<\fBtypename\fP \fBK\fP > \fBusing\fP \fBunordered_set\fP = std::unordered_set<\fBK\fP, std::hash<\fBK\fP>, std::equal_to<\fBK\fP>, \fBcMainAllocator\fP<\fBK\fP>>"
.br
.ti -1c
.RI "template<\fBtypename\fP \fBK\fP > \fBusing\fP \fBhunordered_set\fP = std::unordered_set<\fBK\fP, std::hash<\fBK\fP>, std::equal_to<\fBK\fP>, \fBcHotAllocator\fP<\fBK\fP>>"
.br
.ti -1c
.RI "template<\fBtypename\fP \fBK\fP , \fBtypename\fP \fBV\fP > \fBusing\fP \fBunordered_map\fP = std::unordered_map<\fBK\fP, \fBV\fP, std::hash<\fBK\fP>, std::equal_to<\fBK\fP>, \fBcMainAllocator\fP<std::pair<\fBK\fP, \fBV\fP>>>"
.br
.ti -1c
.RI "template<\fBtypename\fP \fBK\fP , \fBtypename\fP \fBV\fP > \fBusing\fP \fBhunordered_map\fP = std::unordered_map<\fBK\fP, \fBV\fP, std::hash<\fBK\fP>, std::equal_to<\fBK\fP>, \fBcHotAllocator\fP<std::pair<\fBK\fP, \fBV\fP>>>"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBeGamepadButton\fP : u8 { \fBPad_A\fP = 0, \fBPad_B\fP = 1, \fBPad_X\fP = 2, \fBPad_Y\fP = 3, \fBPad_LeftBumper\fP = 4, \fBPad_RightBumper\fP = 5, \fBPad_Back\fP = 6, \fBPad_Start\fP = 7, \fBPad_Guide\fP = 8, \fBPad_LeftThumb\fP = 9, \fBPad_RightThumb\fP = 10, \fBPad_Up\fP = 11, \fBPad_Right\fP = 12, \fBPad_Down\fP = 13, \fBPad_Left\fP = 14, \fBPad_Last\fP = Pad_Left, \fBPad_Cross\fP = A, \fBPad_Circle\fP = B, \fBPad_Square\fP = X, \fBPad_Triangle\fP = Y }"
.br
.ti -1c
.RI "enum \fBeGamepadAxis\fP : u8 { \fBAxis_LeftX\fP = 0, \fBAxis_LeftY\fP = 1, \fBAxis_RightX\fP = 2, \fBAxis_RightY\fP = 3, \fBAxis_LeftTrigger\fP = 4, \fBAxis_RightTrigger\fP = 5, \fBAxis_Last\fP = Axis_RightTrigger }"
.br
.ti -1c
.RI "enum \fBeKey\fP : u16 { \fBNone\fP = 0, \fBSpace\fP = 32, \fBApostrophe\fP = 39, \fBComma\fP = 44, \fBMinus\fP = 45, \fBPeriod\fP = 46, \fBSlash\fP = 47, \fBD0\fP = 48, \fBD1\fP = 49, \fBD2\fP = 50, \fBD3\fP = 51, \fBD4\fP = 52, \fBD5\fP = 53, \fBD6\fP = 54, \fBD7\fP = 55, \fBD8\fP = 56, \fBD9\fP = 57, \fBSemicolon\fP = 59, \fBEqual\fP = 61, \fBA\fP = 65, \fBB\fP = 66, \fBC\fP = 67, \fBD\fP = 68, \fBE\fP = 69, \fBF\fP = 70, \fBG\fP = 71, \fBH\fP = 72, \fBI\fP = 73, \fBJ\fP = 74, \fBK\fP = 75, \fBL\fP = 76, \fBM\fP = 77, \fBN\fP = 78, \fBO\fP = 79, \fBP\fP = 80, \fBQ\fP = 81, \fBR\fP = 82, \fBS\fP = 83, \fBT\fP = 84, \fBU\fP = 85, \fBV\fP = 86, \fBW\fP = 87, \fBX\fP = 88, \fBY\fP = 89, \fBZ\fP = 90, \fBLeftBracket\fP = 91, \fBBackslash\fP = 92, \fBRightBracket\fP = 93, \fBGraveAccent\fP = 96, \fBWorld1\fP = 161, \fBWorld2\fP = 162, \fBEsc\fP = 256, \fBEnter\fP = 257, \fBTab\fP = 258, \fBBackspace\fP = 259, \fBInsert\fP = 260, \fBDelete\fP = 261, \fBRight\fP = 262, \fBLeft\fP = 263, \fBDown\fP = 264, \fBUp\fP = 265, \fBPageUp\fP = 266, \fBPageDown\fP = 267, \fBHome\fP = 268, \fBEnd\fP = 269, \fBCapsLock\fP = 280, \fBScrollLock\fP = 281, \fBNumLock\fP = 282, \fBPrintScreen\fP = 283, \fBPause\fP = 284, \fBF1\fP = 290, \fBF2\fP = 291, \fBF3\fP = 292, \fBF4\fP = 293, \fBF5\fP = 294, \fBF6\fP = 295, \fBF7\fP = 296, \fBF8\fP = 297, \fBF9\fP = 298, \fBF10\fP = 299, \fBF11\fP = 300, \fBF12\fP = 301, \fBF13\fP = 302, \fBF14\fP = 303, \fBF15\fP = 304, \fBF16\fP = 305, \fBF17\fP = 306, \fBF18\fP = 307, \fBF19\fP = 308, \fBF20\fP = 309, \fBF21\fP = 310, \fBF22\fP = 311, \fBF23\fP = 312, \fBF24\fP = 313, \fBF25\fP = 314, \fBKP0\fP = 320, \fBKP1\fP = 321, \fBKP2\fP = 322, \fBKP3\fP = 323, \fBKP4\fP = 324, \fBKP5\fP = 325, \fBKP6\fP = 326, \fBKP7\fP = 327, \fBKP8\fP = 328, \fBKP9\fP = 329, \fBKPDecimal\fP = 330, \fBKPDivide\fP = 331, \fBKPMultiply\fP = 332, \fBKPSubtract\fP = 333, \fBKPAdd\fP = 334, \fBKPEnter\fP = 335, \fBKPEqual\fP = 336, \fBLeftShift\fP = 340, \fBLeftControl\fP = 341, \fBLeftAlt\fP = 342, \fBLeftSuper\fP = 343, \fBRightShift\fP = 344, \fBRightControl\fP = 345, \fBRightAlt\fP = 346, \fBRightSuper\fP = 347, \fBMenu\fP = 348 }"
.br
.ti -1c
.RI "enum \fBeMouse\fP : u8 { \fBNoneButton\fP = 16, \fBButton0\fP = 0, \fBButton1\fP = 1, \fBButton2\fP = 2, \fBButton3\fP = 3, \fBButton4\fP = 4, \fBButton5\fP = 5, \fBButton6\fP = 6, \fBButton7\fP = 7, \fBButtonLast\fP = Button7, \fBButtonLeft\fP = Button0, \fBButtonRight\fP = Button1, \fBButtonMiddle\fP = Button2 }"
.br
.ti -1c
.RI "enum class \fBeCursorMode\fP { \fBNORMAL\fP, \fBHIDE\fP, \fBDISABLE\fP, \fBCAPTURED\fP, \fBDEFAULT\fP = NORMAL }"
.br
.ti -1c
.RI "enum class \fBeWindowTheme\fP { \fBLIGHT\fP, \fBDARK\fP, \fBDEFAULT\fP = LIGHT }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBvoid\fP * \fBalign16_malloc\fP (\fBusize\fP \fBsize\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBalign16_free\fP (\fBvoid\fP *\fBaddress\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP , \fBclass\fP \fBU\fP > \fBbool\fP \fBoperator==\fP (\fBconst\fP \fBcHotAllocator\fP< \fBT\fP > &, \fBconst\fP \fBcHotAllocator\fP< \fBU\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP , \fBclass\fP \fBU\fP > \fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBcHotAllocator\fP< \fBT\fP > &, \fBconst\fP \fBcHotAllocator\fP< \fBU\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP , \fBclass\fP \fBU\fP > \fBbool\fP \fBoperator==\fP (\fBconst\fP \fBcMainAllocator\fP< \fBT\fP > &, \fBconst\fP \fBcMainAllocator\fP< \fBU\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP , \fBclass\fP \fBU\fP > \fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBcMainAllocator\fP< \fBT\fP > &, \fBconst\fP \fBcMainAllocator\fP< \fBU\fP > &)"
.br
.ti -1c
.RI "\fBevent_begin\fP (\fBWindowClosed\fP) \fBevent_end\fP(\fBWindowClosed\fP) event_begin(\fBWindowMoved\fP"
.br
.ti -1c
.RI "\fBint\fP \fBint\fP \fBy\fP \fBevent_end\fP (\fBWindowMoved\fP, \fBx\fP, \fBy\fP) \fBevent_begin\fP(WindowResized"
.br
.ti -1c
.RI "\fBint\fP \fBint\fP \fBy\fP \fBint\fP \fBint\fP \fBh\fP \fBevent_end\fP (WindowResized, \fBw\fP, \fBh\fP) \fBevent_begin\fP(WindowFrameResized"
.br
.ti -1c
.RI "\fBint\fP \fBint\fP \fBy\fP \fBint\fP \fBint\fP \fBh\fP \fBint\fP \fBint\fP \fBh\fP \fBevent_end\fP (WindowFrameResized, \fBw\fP, \fBh\fP) \fBenum\fP \fBeWindowFrameResizedPriority\fP"
.br
.ti -1c
.RI "\fBevent_begin\fP (\fBWindowRatioChanged\fP, \fBfloat\fP \fBratio\fP) \fBevent_end\fP(\fBWindowRatioChanged\fP"
.br
.ti -1c
.RI "\fBratio\fP \fBevent_begin\fP (\fBWindowFocused\fP) \fBevent_end\fP(\fBWindowFocused\fP) event_begin(\fBWindowFocusLost\fP) \fBevent_end\fP(\fBWindowFocusLost\fP) event_begin(KeyPressed"
.br
.ti -1c
.RI "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBevent_end\fP (KeyPressed, \fBkey\fP) \fBevent_begin\fP(KeyReleased"
.br
.ti -1c
.RI "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBevent_end\fP (KeyReleased, \fBkey\fP) \fBevent_begin\fP(KeyHold"
.br
.ti -1c
.RI "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBevent_end\fP (KeyHold, \fBkey\fP) \fBevent_begin\fP(MousePressed"
.br
.ti -1c
.RI "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBevent_end\fP (MousePressed, \fBmouse\fP) \fBevent_begin\fP(MouseReleased"
.br
.ti -1c
.RI "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBevent_end\fP (MouseReleased, \fBmouse\fP) \fBevent_begin\fP(MouseHold"
.br
.ti -1c
.RI "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBevent_end\fP (MouseHold, \fBmouse\fP) \fBevent_begin\fP(CursorMoved"
.br
.ti -1c
.RI "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBevent_end\fP (CursorMoved, \fBx\fP, \fBy\fP) \fBevent_begin\fP(\fBCursorEntered\fP) event_end(\fBCursorEntered\fP) \fBevent_begin\fP(\fBCursorLeft\fP) event_end(\fBCursorLeft\fP) \fBevent_begin\fP(ScrollChanged"
.br
.ti -1c
.RI "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBevent_end\fP (ScrollChanged, \fBx\fP, \fBy\fP) \fBevent_begin\fP(\fBCharTyped\fP"
.br
.ti -1c
.RI "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBu32\fP \fBcharUnicode\fP \fBevent_end\fP (\fBCharTyped\fP, \fBcharUnicode\fP) \fBevent_begin\fP(\fBCharModsTyped\fP"
.br
.ti -1c
.RI "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBu32\fP \fBcharUnicode\fP \fBconst\fP \fBu32\fP \fBconst\fP \fBint\fP \fBmods\fP \fBevent_end\fP (\fBCharModsTyped\fP, \fBcharUnicode\fP, \fBmods\fP) \fBevent_begin\fP(\fBFileAdded\fP"
.br
.ti -1c
.RI "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBu32\fP \fBcharUnicode\fP \fBconst\fP \fBu32\fP \fBconst\fP \fBint\fP \fBmods\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBevent_end\fP (\fBFileAdded\fP, \fBwatchpath\fP, \fBfilepath\fP) \fBevent_begin\fP(\fBFileDeleted\fP"
.br
.ti -1c
.RI "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBu32\fP \fBcharUnicode\fP \fBconst\fP \fBu32\fP \fBconst\fP \fBint\fP \fBmods\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBevent_end\fP (\fBFileDeleted\fP, \fBwatchpath\fP, \fBfilepath\fP) \fBevent_begin\fP(\fBFileModified\fP"
.br
.ti -1c
.RI "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBu32\fP \fBcharUnicode\fP \fBconst\fP \fBu32\fP \fBconst\fP \fBint\fP \fBmods\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBevent_end\fP (\fBFileModified\fP, \fBwatchpath\fP, \fBfilepath\fP) \fBevent_begin\fP(\fBFileNewName\fP"
.br
.ti -1c
.RI "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBu32\fP \fBcharUnicode\fP \fBconst\fP \fBu32\fP \fBconst\fP \fBint\fP \fBmods\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBevent_end\fP (\fBFileNewName\fP, \fBwatchpath\fP, \fBfilepath\fP) \fBevent_begin\fP(\fBFileOldName\fP"
.br
.ti -1c
.RI "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBu32\fP \fBcharUnicode\fP \fBconst\fP \fBu32\fP \fBconst\fP \fBint\fP \fBmods\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBevent_end\fP (\fBFileOldName\fP, \fBwatchpath\fP, \fBfilepath\fP) \fBevent_begin\fP(\fBSampleCountChanged\fP"
.br
.ti -1c
.RI "\fBJSON_ENUM\fP (\fBeGamepadButton\fP, { { \fBeGamepadButton::Pad_A\fP, 'Pad_A' }, { \fBeGamepadButton::Pad_B\fP, 'Pad_B' }, { \fBeGamepadButton::Pad_X\fP, 'Pad_X' }, { \fBeGamepadButton::Pad_Y\fP, 'Pad_Y' }, { \fBeGamepadButton::Pad_LeftBumper\fP, 'Pad_LeftBumper' }, { \fBeGamepadButton::Pad_RightBumper\fP, 'Pad_RightBumper' }, { \fBeGamepadButton::Pad_Back\fP, 'Pad_Back' }, { \fBeGamepadButton::Pad_Start\fP, 'Pad_Start' }, { \fBeGamepadButton::Pad_Guide\fP, 'Pad_Guide' }, { \fBeGamepadButton::Pad_LeftThumb\fP, 'Pad_LeftThumb' }, { \fBeGamepadButton::Pad_RightThumb\fP, 'Pad_RightThumb' }, { \fBeGamepadButton::Pad_Up\fP, 'Pad_Up' }, { \fBeGamepadButton::Pad_Right\fP, 'Pad_Right' }, { \fBeGamepadButton::Pad_Down\fP, 'Pad_Down' }, { \fBeGamepadButton::Pad_Left\fP, 'Pad_Left' }, { \fBeGamepadButton::Pad_Last\fP, 'Pad_Last' }, { \fBeGamepadButton::Pad_Cross\fP, 'Pad_Cross' }, { \fBeGamepadButton::Pad_Circle\fP, 'Pad_Circle' }, { \fBeGamepadButton::Pad_Square\fP, 'Pad_Square' }, { \fBeGamepadButton::Pad_Triangle\fP, 'Pad_Triangle' }, }) JSON_ENUM(\fBeGamepadAxis\fP"
.br
.ti -1c
.RI "\fBXML_ENUM\fP (\fBeGamepadButton\fP, { { \fBeGamepadButton::Pad_A\fP, 'Pad_A' }, { \fBeGamepadButton::Pad_B\fP, 'Pad_B' }, { \fBeGamepadButton::Pad_X\fP, 'Pad_X' }, { \fBeGamepadButton::Pad_Y\fP, 'Pad_Y' }, { \fBeGamepadButton::Pad_LeftBumper\fP, 'Pad_LeftBumper' }, { \fBeGamepadButton::Pad_RightBumper\fP, 'Pad_RightBumper' }, { \fBeGamepadButton::Pad_Back\fP, 'Pad_Back' }, { \fBeGamepadButton::Pad_Start\fP, 'Pad_Start' }, { \fBeGamepadButton::Pad_Guide\fP, 'Pad_Guide' }, { \fBeGamepadButton::Pad_LeftThumb\fP, 'Pad_LeftThumb' }, { \fBeGamepadButton::Pad_RightThumb\fP, 'Pad_RightThumb' }, { \fBeGamepadButton::Pad_Up\fP, 'Pad_Up' }, { \fBeGamepadButton::Pad_Right\fP, 'Pad_Right' }, { \fBeGamepadButton::Pad_Down\fP, 'Pad_Down' }, { \fBeGamepadButton::Pad_Left\fP, 'Pad_Left' }, { \fBeGamepadButton::Pad_Last\fP, 'Pad_Last' }, { \fBeGamepadButton::Pad_Cross\fP, 'Pad_Cross' }, { \fBeGamepadButton::Pad_Circle\fP, 'Pad_Circle' }, { \fBeGamepadButton::Pad_Square\fP, 'Pad_Square' }, { \fBeGamepadButton::Pad_Triangle\fP, 'Pad_Triangle' }, }) XML_ENUM(\fBeGamepadAxis\fP"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBu64\fP \fBHash\fP (\fBconst\fP \fBstring\fP &\fBstr\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBu64\fP \fBHash\fP (\fBconst\fP \fBhstring\fP &\fBstr\fP)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBint\fP \fBx\fP"
.br
.ti -1c
.RI "\fBint\fP \fBint\fP \fBy\fP \fBint\fP \fBw\fP"
.br
.ti -1c
.RI "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBu32\fP charUnicode \fBconst\fP \fBu32\fP \fBcharUnicode\fP"
.br
.ti -1c
.RI "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBu32\fP \fBcharUnicode\fP \fBconst\fP \fBu32\fP \fBconst\fP \fBint\fP \fBmods\fP \fBconst\fP \fBstring\fP & \fBwatchpath\fP"
.br
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "template<\fBtypename\fP \fBT\fP , \fBsize_t\fP Size> \fBusing\fP \fBxpe::core::array\fP = std::array<\fBT\fP, Size>"

.SS "\fBusing\fP \fBxpe::core::Boolean\fP = \fBu32\fP"

.SS "\fBusing\fP \fBxpe::core::dword\fP = \fBu32\fP"

.SS "\fBusing\fP \fBxpe::core::ErrorSinkColor\fP = spdlog::sinks::stderr_color_sink_mt"

.SS "\fBusing\fP \fBxpe::core::f32\fP = \fBfloat\fP"

.SS "\fBusing\fP \fBxpe::core::f64\fP = \fBdouble\fP"

.SS "\fBusing\fP \fBxpe::core::FileSink\fP = spdlog::sinks::basic_file_sink_mt"

.SS "template<\fBtypename\fP \fBK\fP , \fBtypename\fP \fBV\fP > \fBusing\fP \fBxpe::core::hmap\fP = std::map<\fBK\fP, \fBV\fP, std::equal_to<\fBK\fP>, \fBcHotAllocator\fP<std::pair<\fBK\fP, \fBV\fP>>>"

.SS "template<\fBtypename\fP \fBK\fP , \fBtypename\fP \fBComparator\fP  = std::less<K>> \fBusing\fP \fBxpe::core::hset\fP = std::set<\fBK\fP, \fBComparator\fP, \fBcHotAllocator\fP<\fBK\fP>>"

.SS "\fBtypedef\fP std::basic_string<\fBchar\fP, std::char_traits<\fBchar\fP>, \fBcHotAllocator\fP<\fBchar\fP> > \fBxpe::core::hstring\fP"

.SS "\fBtypedef\fP std::basic_stringstream<\fBchar\fP, std::char_traits<\fBchar\fP>, \fBcHotAllocator\fP<\fBchar\fP> > \fBxpe::core::hstringstream\fP"

.SS "template<\fBtypename\fP \fBK\fP , \fBtypename\fP \fBV\fP > \fBusing\fP \fBxpe::core::hunordered_map\fP = std::unordered_map<\fBK\fP, \fBV\fP, std::hash<\fBK\fP>, std::equal_to<\fBK\fP>, \fBcHotAllocator\fP<std::pair<\fBK\fP, \fBV\fP>>>"

.SS "template<\fBtypename\fP \fBK\fP > \fBusing\fP \fBxpe::core::hunordered_set\fP = std::unordered_set<\fBK\fP, std::hash<\fBK\fP>, std::equal_to<\fBK\fP>, \fBcHotAllocator\fP<\fBK\fP>>"

.SS "template<\fBtypename\fP \fBT\fP > \fBusing\fP \fBxpe::core::hvector\fP = std::vector<\fBT\fP, \fBcHotAllocator\fP<\fBT\fP>>"

.SS "\fBusing\fP \fBxpe::core::LogSinkColor\fP = spdlog::sinks::stdout_color_sink_mt"

.SS "template<\fBtypename\fP \fBK\fP , \fBtypename\fP \fBV\fP > \fBusing\fP \fBxpe::core::map\fP = std::map<\fBK\fP, \fBV\fP, std::equal_to<\fBK\fP>, \fBcMainAllocator\fP<std::pair<\fBK\fP, \fBV\fP>>>"

.SS "\fBusing\fP \fBxpe::core::qword\fP = \fBu64\fP"

.SS "\fBusing\fP \fBxpe::core::s16\fP = \fBint16_t\fP"

.SS "\fBusing\fP \fBxpe::core::s32\fP = \fBint32_t\fP"

.SS "\fBusing\fP \fBxpe::core::s64\fP = \fBint64_t\fP"

.SS "\fBusing\fP \fBxpe::core::s8\fP = \fBint8_t\fP"

.SS "template<\fBtypename\fP \fBK\fP , \fBtypename\fP \fBComparator\fP  = std::less<K>> \fBusing\fP \fBxpe::core::set\fP = std::set<\fBK\fP, \fBComparator\fP, \fBcMainAllocator\fP<\fBK\fP>>"

.SS "\fBusing\fP \fBxpe::core::Sink\fP = spdlog::sink_ptr"

.SS "\fBtypedef\fP std::basic_string<\fBchar\fP, std::char_traits<\fBchar\fP>, \fBcMainAllocator\fP<\fBchar\fP> > \fBxpe::core::string\fP"

.SS "\fBtypedef\fP std::basic_stringstream<\fBchar\fP, std::char_traits<\fBchar\fP>, \fBcMainAllocator\fP<\fBchar\fP> > \fBxpe::core::stringstream\fP"

.SS "\fBtypedef\fP \fBconst\fP std::chrono::duration<\fBdouble\fP, std::milli> \fBxpe::core::TimeMillis\fP"

.SS "\fBusing\fP \fBxpe::core::u16\fP = \fBuint16_t\fP"

.SS "\fBusing\fP \fBxpe::core::u32\fP = \fBuint32_t\fP"

.SS "\fBusing\fP \fBxpe::core::u64\fP = \fBuint64_t\fP"

.SS "\fBusing\fP \fBxpe::core::u8\fP = \fBuint8_t\fP"

.SS "template<\fBtypename\fP \fBK\fP , \fBtypename\fP \fBV\fP > \fBusing\fP \fBxpe::core::unordered_map\fP = std::unordered_map<\fBK\fP, \fBV\fP, std::hash<\fBK\fP>, std::equal_to<\fBK\fP>, \fBcMainAllocator\fP<std::pair<\fBK\fP, \fBV\fP>>>"

.SS "template<\fBtypename\fP \fBK\fP > \fBusing\fP \fBxpe::core::unordered_set\fP = std::unordered_set<\fBK\fP, std::hash<\fBK\fP>, std::equal_to<\fBK\fP>, \fBcMainAllocator\fP<\fBK\fP>>"

.SS "template<\fBtypename\fP \fBT\fP > \fBusing\fP \fBxpe::core::vector\fP = std::vector<\fBT\fP, \fBcMainAllocator\fP<\fBT\fP>>"

.SH "Enumeration Type Documentation"
.PP 
.SS "\fBenum\fP \fBclass\fP \fBxpe::core::eCursorMode\fP\fR [strong]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINORMAL \fP\fP
.TP
\fB\fIHIDE \fP\fP
.TP
\fB\fIDISABLE \fP\fP
.TP
\fB\fICAPTURED \fP\fP
.TP
\fB\fIDEFAULT \fP\fP
.SS "\fBenum\fP \fBxpe::core::eGamepadAxis\fP : \fBu8\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIAxis_LeftX \fP\fP
.TP
\fB\fIAxis_LeftY \fP\fP
.TP
\fB\fIAxis_RightX \fP\fP
.TP
\fB\fIAxis_RightY \fP\fP
.TP
\fB\fIAxis_LeftTrigger \fP\fP
.TP
\fB\fIAxis_RightTrigger \fP\fP
.TP
\fB\fIAxis_Last \fP\fP
.SS "\fBenum\fP \fBxpe::core::eGamepadButton\fP : \fBu8\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIPad_A \fP\fP
.TP
\fB\fIPad_B \fP\fP
.TP
\fB\fIPad_X \fP\fP
.TP
\fB\fIPad_Y \fP\fP
.TP
\fB\fIPad_LeftBumper \fP\fP
.TP
\fB\fIPad_RightBumper \fP\fP
.TP
\fB\fIPad_Back \fP\fP
.TP
\fB\fIPad_Start \fP\fP
.TP
\fB\fIPad_Guide \fP\fP
.TP
\fB\fIPad_LeftThumb \fP\fP
.TP
\fB\fIPad_RightThumb \fP\fP
.TP
\fB\fIPad_Up \fP\fP
.TP
\fB\fIPad_Right \fP\fP
.TP
\fB\fIPad_Down \fP\fP
.TP
\fB\fIPad_Left \fP\fP
.TP
\fB\fIPad_Last \fP\fP
.TP
\fB\fIPad_Cross \fP\fP
.TP
\fB\fIPad_Circle \fP\fP
.TP
\fB\fIPad_Square \fP\fP
.TP
\fB\fIPad_Triangle \fP\fP
.SS "\fBenum\fP \fBxpe::core::eKey\fP : \fBu16\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINone \fP\fP
.TP
\fB\fISpace \fP\fP
.TP
\fB\fIApostrophe \fP\fP
.TP
\fB\fIComma \fP\fP
.TP
\fB\fIMinus \fP\fP
.TP
\fB\fIPeriod \fP\fP
.TP
\fB\fISlash \fP\fP
.TP
\fB\fID0 \fP\fP
.TP
\fB\fID1 \fP\fP
.TP
\fB\fID2 \fP\fP
.TP
\fB\fID3 \fP\fP
.TP
\fB\fID4 \fP\fP
.TP
\fB\fID5 \fP\fP
.TP
\fB\fID6 \fP\fP
.TP
\fB\fID7 \fP\fP
.TP
\fB\fID8 \fP\fP
.TP
\fB\fID9 \fP\fP
.TP
\fB\fISemicolon \fP\fP
.TP
\fB\fIEqual \fP\fP
.TP
\fB\fIA \fP\fP
.TP
\fB\fIB \fP\fP
.TP
\fB\fIC \fP\fP
.TP
\fB\fID \fP\fP
.TP
\fB\fIE \fP\fP
.TP
\fB\fIF \fP\fP
.TP
\fB\fIG \fP\fP
.TP
\fB\fIH \fP\fP
.TP
\fB\fII \fP\fP
.TP
\fB\fIJ \fP\fP
.TP
\fB\fIK \fP\fP
.TP
\fB\fIL \fP\fP
.TP
\fB\fIM \fP\fP
.TP
\fB\fIN \fP\fP
.TP
\fB\fIO \fP\fP
.TP
\fB\fIP \fP\fP
.TP
\fB\fIQ \fP\fP
.TP
\fB\fIR \fP\fP
.TP
\fB\fIS \fP\fP
.TP
\fB\fIT \fP\fP
.TP
\fB\fIU \fP\fP
.TP
\fB\fIV \fP\fP
.TP
\fB\fIW \fP\fP
.TP
\fB\fIX \fP\fP
.TP
\fB\fIY \fP\fP
.TP
\fB\fIZ \fP\fP
.TP
\fB\fILeftBracket \fP\fP
.TP
\fB\fIBackslash \fP\fP
.TP
\fB\fIRightBracket \fP\fP
.TP
\fB\fIGraveAccent \fP\fP
.TP
\fB\fIWorld1 \fP\fP
.TP
\fB\fIWorld2 \fP\fP
.TP
\fB\fIEsc \fP\fP
.TP
\fB\fIEnter \fP\fP
.TP
\fB\fITab \fP\fP
.TP
\fB\fIBackspace \fP\fP
.TP
\fB\fIInsert \fP\fP
.TP
\fB\fIDelete \fP\fP
.TP
\fB\fIRight \fP\fP
.TP
\fB\fILeft \fP\fP
.TP
\fB\fIDown \fP\fP
.TP
\fB\fIUp \fP\fP
.TP
\fB\fIPageUp \fP\fP
.TP
\fB\fIPageDown \fP\fP
.TP
\fB\fIHome \fP\fP
.TP
\fB\fIEnd \fP\fP
.TP
\fB\fICapsLock \fP\fP
.TP
\fB\fIScrollLock \fP\fP
.TP
\fB\fINumLock \fP\fP
.TP
\fB\fIPrintScreen \fP\fP
.TP
\fB\fIPause \fP\fP
.TP
\fB\fIF1 \fP\fP
.TP
\fB\fIF2 \fP\fP
.TP
\fB\fIF3 \fP\fP
.TP
\fB\fIF4 \fP\fP
.TP
\fB\fIF5 \fP\fP
.TP
\fB\fIF6 \fP\fP
.TP
\fB\fIF7 \fP\fP
.TP
\fB\fIF8 \fP\fP
.TP
\fB\fIF9 \fP\fP
.TP
\fB\fIF10 \fP\fP
.TP
\fB\fIF11 \fP\fP
.TP
\fB\fIF12 \fP\fP
.TP
\fB\fIF13 \fP\fP
.TP
\fB\fIF14 \fP\fP
.TP
\fB\fIF15 \fP\fP
.TP
\fB\fIF16 \fP\fP
.TP
\fB\fIF17 \fP\fP
.TP
\fB\fIF18 \fP\fP
.TP
\fB\fIF19 \fP\fP
.TP
\fB\fIF20 \fP\fP
.TP
\fB\fIF21 \fP\fP
.TP
\fB\fIF22 \fP\fP
.TP
\fB\fIF23 \fP\fP
.TP
\fB\fIF24 \fP\fP
.TP
\fB\fIF25 \fP\fP
.TP
\fB\fIKP0 \fP\fP
.TP
\fB\fIKP1 \fP\fP
.TP
\fB\fIKP2 \fP\fP
.TP
\fB\fIKP3 \fP\fP
.TP
\fB\fIKP4 \fP\fP
.TP
\fB\fIKP5 \fP\fP
.TP
\fB\fIKP6 \fP\fP
.TP
\fB\fIKP7 \fP\fP
.TP
\fB\fIKP8 \fP\fP
.TP
\fB\fIKP9 \fP\fP
.TP
\fB\fIKPDecimal \fP\fP
.TP
\fB\fIKPDivide \fP\fP
.TP
\fB\fIKPMultiply \fP\fP
.TP
\fB\fIKPSubtract \fP\fP
.TP
\fB\fIKPAdd \fP\fP
.TP
\fB\fIKPEnter \fP\fP
.TP
\fB\fIKPEqual \fP\fP
.TP
\fB\fILeftShift \fP\fP
.TP
\fB\fILeftControl \fP\fP
.TP
\fB\fILeftAlt \fP\fP
.TP
\fB\fILeftSuper \fP\fP
.TP
\fB\fIRightShift \fP\fP
.TP
\fB\fIRightControl \fP\fP
.TP
\fB\fIRightAlt \fP\fP
.TP
\fB\fIRightSuper \fP\fP
.TP
\fB\fIMenu \fP\fP
.SS "\fBenum\fP \fBxpe::core::eMouse\fP : \fBu8\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINoneButton \fP\fP
.TP
\fB\fIButton0 \fP\fP
.TP
\fB\fIButton1 \fP\fP
.TP
\fB\fIButton2 \fP\fP
.TP
\fB\fIButton3 \fP\fP
.TP
\fB\fIButton4 \fP\fP
.TP
\fB\fIButton5 \fP\fP
.TP
\fB\fIButton6 \fP\fP
.TP
\fB\fIButton7 \fP\fP
.TP
\fB\fIButtonLast \fP\fP
.TP
\fB\fIButtonLeft \fP\fP
.TP
\fB\fIButtonRight \fP\fP
.TP
\fB\fIButtonMiddle \fP\fP
.SS "\fBenum\fP \fBclass\fP \fBxpe::core::eWindowTheme\fP\fR [strong]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILIGHT \fP\fP
.TP
\fB\fIDARK \fP\fP
.TP
\fB\fIDEFAULT \fP\fP
.SH "Function Documentation"
.PP 
.SS "\fBENGINE_API\fP \fBvoid\fP xpe::core::align16_free (\fBvoid\fP * address)"

.SS "\fBENGINE_API\fP \fBvoid\fP * xpe::core::align16_malloc (\fBusize\fP size)"

.SS "xpe::core::event_begin (\fBWindowClosed\fP)"

.SS "\fBratio\fP xpe::core::event_begin (\fBWindowFocused\fP)"

.SS "xpe::core::event_begin (\fBWindowRatioChanged\fP, \fBfloat\fP ratio)"

.SS "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBu32\fP \fBcharUnicode\fP \fBconst\fP \fBu32\fP \fBconst\fP \fBint\fP \fBmods\fP xpe::core::event_end (\fBCharModsTyped\fP, \fBcharUnicode\fP, \fBmods\fP)"

.SS "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBu32\fP \fBcharUnicode\fP xpe::core::event_end (\fBCharTyped\fP, \fBcharUnicode\fP)"

.SS "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP xpe::core::event_end (CursorMoved, \fBx\fP, \fBy\fP)"

.SS "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBu32\fP \fBcharUnicode\fP \fBconst\fP \fBu32\fP \fBconst\fP \fBint\fP \fBmods\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP xpe::core::event_end (\fBFileAdded\fP, \fBwatchpath\fP, \fBfilepath\fP)"

.SS "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBu32\fP \fBcharUnicode\fP \fBconst\fP \fBu32\fP \fBconst\fP \fBint\fP \fBmods\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP xpe::core::event_end (\fBFileDeleted\fP, \fBwatchpath\fP, \fBfilepath\fP)"

.SS "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBu32\fP \fBcharUnicode\fP \fBconst\fP \fBu32\fP \fBconst\fP \fBint\fP \fBmods\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP xpe::core::event_end (\fBFileModified\fP, \fBwatchpath\fP, \fBfilepath\fP)"

.SS "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBu32\fP \fBcharUnicode\fP \fBconst\fP \fBu32\fP \fBconst\fP \fBint\fP \fBmods\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP xpe::core::event_end (\fBFileNewName\fP, \fBwatchpath\fP, \fBfilepath\fP)"

.SS "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBu32\fP \fBcharUnicode\fP \fBconst\fP \fBu32\fP \fBconst\fP \fBint\fP \fBmods\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP xpe::core::event_end (\fBFileOldName\fP, \fBwatchpath\fP, \fBfilepath\fP)"

.SS "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP xpe::core::event_end (KeyHold, \fBkey\fP)"

.SS "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP xpe::core::event_end (KeyPressed, \fBkey\fP)"

.SS "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP xpe::core::event_end (KeyReleased, \fBkey\fP)"

.SS "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP xpe::core::event_end (MouseHold, \fBmouse\fP)"

.SS "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP xpe::core::event_end (MousePressed, \fBmouse\fP)"

.SS "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP xpe::core::event_end (MouseReleased, \fBmouse\fP)"

.SS "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP xpe::core::event_end (ScrollChanged, \fBx\fP, \fBy\fP)"

.SS "\fBint\fP \fBint\fP \fBy\fP \fBint\fP \fBint\fP \fBh\fP \fBint\fP \fBint\fP \fBh\fP xpe::core::event_end (WindowFrameResized, \fBw\fP, \fBh\fP)"

.SS "\fBint\fP \fBint\fP \fBy\fP xpe::core::event_end (\fBWindowMoved\fP, \fBx\fP, \fBy\fP)"

.SS "\fBint\fP \fBint\fP \fBy\fP \fBint\fP \fBint\fP \fBh\fP xpe::core::event_end (WindowResized, \fBw\fP, \fBh\fP)"

.SS "\fBENGINE_API\fP \fBu64\fP xpe::core::Hash (\fBconst\fP \fBhstring\fP & str)"

.SS "\fBENGINE_API\fP \fBu64\fP xpe::core::Hash (\fBconst\fP \fBstring\fP & str)"

.SS "xpe::core::JSON_ENUM (\fBeGamepadButton\fP, { { \fBeGamepadButton::Pad_A\fP, 'Pad_A' }, { \fBeGamepadButton::Pad_B\fP, 'Pad_B' }, { \fBeGamepadButton::Pad_X\fP, 'Pad_X' }, { \fBeGamepadButton::Pad_Y\fP, 'Pad_Y' }, { \fBeGamepadButton::Pad_LeftBumper\fP, 'Pad_LeftBumper' }, { \fBeGamepadButton::Pad_RightBumper\fP, 'Pad_RightBumper' }, { \fBeGamepadButton::Pad_Back\fP, 'Pad_Back' }, { \fBeGamepadButton::Pad_Start\fP, 'Pad_Start' }, { \fBeGamepadButton::Pad_Guide\fP, 'Pad_Guide' }, { \fBeGamepadButton::Pad_LeftThumb\fP, 'Pad_LeftThumb' }, { \fBeGamepadButton::Pad_RightThumb\fP, 'Pad_RightThumb' }, { \fBeGamepadButton::Pad_Up\fP, 'Pad_Up' }, { \fBeGamepadButton::Pad_Right\fP, 'Pad_Right' }, { \fBeGamepadButton::Pad_Down\fP, 'Pad_Down' }, { \fBeGamepadButton::Pad_Left\fP, 'Pad_Left' }, { \fBeGamepadButton::Pad_Last\fP, 'Pad_Last' }, { \fBeGamepadButton::Pad_Cross\fP, 'Pad_Cross' }, { \fBeGamepadButton::Pad_Circle\fP, 'Pad_Circle' }, { \fBeGamepadButton::Pad_Square\fP, 'Pad_Square' }, { \fBeGamepadButton::Pad_Triangle\fP, 'Pad_Triangle' }, })"

.SS "template<\fBclass\fP \fBT\fP , \fBclass\fP \fBU\fP > \fBbool\fP \fBxpe::core::operator!\fP= (\fBconst\fP \fBcHotAllocator\fP< \fBT\fP > &, \fBconst\fP \fBcHotAllocator\fP< \fBU\fP > &)"

.SS "template<\fBclass\fP \fBT\fP , \fBclass\fP \fBU\fP > \fBbool\fP \fBxpe::core::operator!\fP= (\fBconst\fP \fBcMainAllocator\fP< \fBT\fP > &, \fBconst\fP \fBcMainAllocator\fP< \fBU\fP > &)"

.SS "template<\fBclass\fP \fBT\fP , \fBclass\fP \fBU\fP > \fBbool\fP \fBxpe::core::operator\fP== (\fBconst\fP \fBcHotAllocator\fP< \fBT\fP > &, \fBconst\fP \fBcHotAllocator\fP< \fBU\fP > &)"

.SS "template<\fBclass\fP \fBT\fP , \fBclass\fP \fBU\fP > \fBbool\fP \fBxpe::core::operator\fP== (\fBconst\fP \fBcMainAllocator\fP< \fBT\fP > &, \fBconst\fP \fBcMainAllocator\fP< \fBU\fP > &)"

.SS "xpe::core::XML_ENUM (\fBeGamepadButton\fP, { { \fBeGamepadButton::Pad_A\fP, 'Pad_A' }, { \fBeGamepadButton::Pad_B\fP, 'Pad_B' }, { \fBeGamepadButton::Pad_X\fP, 'Pad_X' }, { \fBeGamepadButton::Pad_Y\fP, 'Pad_Y' }, { \fBeGamepadButton::Pad_LeftBumper\fP, 'Pad_LeftBumper' }, { \fBeGamepadButton::Pad_RightBumper\fP, 'Pad_RightBumper' }, { \fBeGamepadButton::Pad_Back\fP, 'Pad_Back' }, { \fBeGamepadButton::Pad_Start\fP, 'Pad_Start' }, { \fBeGamepadButton::Pad_Guide\fP, 'Pad_Guide' }, { \fBeGamepadButton::Pad_LeftThumb\fP, 'Pad_LeftThumb' }, { \fBeGamepadButton::Pad_RightThumb\fP, 'Pad_RightThumb' }, { \fBeGamepadButton::Pad_Up\fP, 'Pad_Up' }, { \fBeGamepadButton::Pad_Right\fP, 'Pad_Right' }, { \fBeGamepadButton::Pad_Down\fP, 'Pad_Down' }, { \fBeGamepadButton::Pad_Left\fP, 'Pad_Left' }, { \fBeGamepadButton::Pad_Last\fP, 'Pad_Last' }, { \fBeGamepadButton::Pad_Cross\fP, 'Pad_Cross' }, { \fBeGamepadButton::Pad_Circle\fP, 'Pad_Circle' }, { \fBeGamepadButton::Pad_Square\fP, 'Pad_Square' }, { \fBeGamepadButton::Pad_Triangle\fP, 'Pad_Triangle' }, })"

.SH "Variable Documentation"
.PP 
.SS "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBu32\fP charUnicode \fBconst\fP \fBu32\fP xpe::core::charUnicode"

.SS "\fBint\fP \fBint\fP \fBy\fP \fBint\fP \fBint\fP \fBh\fP \fBint\fP xpe::core::w"

.SS "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBu32\fP \fBcharUnicode\fP \fBconst\fP \fBu32\fP \fBconst\fP \fBint\fP \fBmods\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBconst\fP \fBstring\fP \fBconst\fP \fBstring\fP &\fBfilepath\fP \fBconst\fP \fBstring\fP & xpe::core::watchpath"

.SS "\fBratio\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeKey\fP \fBkey\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBeMouse\fP \fBmouse\fP \fBconst\fP \fBdouble\fP \fBconst\fP \fBdouble\fP \fBy\fP \fBconst\fP \fBdouble\fP xpe::core::x"

.SH "Author"
.PP 
Generated automatically by Doxygen for XPE-Engine from the source code\&.
