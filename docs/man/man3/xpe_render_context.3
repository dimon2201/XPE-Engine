.TH "xpe::render::context" 3 "Version 0.1" "XPE-Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
xpe::render::context
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBvoid\fP \fBCopyBuffer\fP (\fBconst\fP \fBsBuffer\fP &\fBbuffer\fP, \fBconst\fP \fBvoid\fP *\fBdata\fP, \fBusize\fP \fBdataByteSize\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBCopyBufferOffset\fP (\fBconst\fP \fBsBuffer\fP &\fBbuffer\fP, \fBusize\fP \fBoffset\fP, \fBconst\fP \fBvoid\fP *\fBdata\fP, \fBusize\fP \fBdataByteSize\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBMoveBuffer\fP (\fBconst\fP \fBsBuffer\fP &\fBbuffer\fP, \fBconst\fP \fBvoid\fP *\fBdata\fP, \fBusize\fP \fBdataByteSize\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBMoveBufferOffset\fP (\fBconst\fP \fBsBuffer\fP &\fBbuffer\fP, \fBusize\fP \fBoffset\fP, \fBconst\fP \fBvoid\fP *\fBdata\fP, \fBusize\fP \fBdataByteSize\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBCopyTexture\fP (\fBconst\fP \fBsTexture\fP &\fBtexture\fP, \fBconst\fP \fBvoid\fP *\fBdata\fP, \fBusize\fP \fBdataByteSize\fP, \fBu32\fP \fBlayerIndex\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBCopyTextureOffset\fP (\fBconst\fP \fBsTexture\fP &\fBtexture\fP, \fBusize\fP \fBoffset\fP, \fBconst\fP \fBvoid\fP *\fBdata\fP, \fBusize\fP \fBdataByteSize\fP, \fBu32\fP \fBlayerIndex\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBMoveTexture\fP (\fBconst\fP \fBsTexture\fP &\fBtexture\fP, \fBconst\fP \fBvoid\fP *\fBdata\fP, \fBusize\fP \fBdataByteSize\fP, \fBu32\fP \fBlayerIndex\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBMoveTextureOffset\fP (\fBconst\fP \fBsTexture\fP &\fBtexture\fP, \fBusize\fP \fBoffset\fP, \fBconst\fP \fBvoid\fP *\fBdata\fP, \fBusize\fP \fBdataByteSize\fP, \fBu32\fP \fBlayerIndex\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBCreateTexture\fP (\fBsTexture\fP &\fBtexture\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBFreeTexture\fP (\fBsTexture\fP &\fBtexture\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBFreeRenderTarget\fP (\fBsRenderTarget\fP &\fBrenderTarget\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBBindRenderTarget\fP (\fBconst\fP \fBvector\fP< \fBvoid\fP * > &\fBcolorViews\fP, \fBvoid\fP *\fBdepthView\fP, \fBsViewport\fP *\fBviewport\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBVSBindBuffer\fP (\fBconst\fP \fBsBuffer\fP &\fBbuffer\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBVSUnbindBuffer\fP (\fBconst\fP \fBsBuffer\fP &\fBbuffer\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBPSBindBuffer\fP (\fBconst\fP \fBsBuffer\fP &\fBbuffer\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBPSUnbindBuffer\fP (\fBconst\fP \fBsBuffer\fP &\fBbuffer\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBGSBindBuffer\fP (\fBconst\fP \fBsBuffer\fP &\fBbuffer\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBGSUnbindBuffer\fP (\fBconst\fP \fBsBuffer\fP &\fBbuffer\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBCSBindBuffer\fP (\fBconst\fP \fBsBuffer\fP &\fBbuffer\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBCSUnbindBuffer\fP (\fBconst\fP \fBsBuffer\fP &\fBbuffer\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBVSBindTexture\fP (\fBconst\fP \fBsTexture\fP &\fBtexture\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBVSBindTexture\fP (\fBconst\fP \fBsTexture\fP &\fBtexture\fP, \fBu32\fP \fBslot\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBVSBindTextureSlot\fP (\fBu32\fP \fBslot\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBVSUnbindTexture\fP (\fBconst\fP \fBsTexture\fP &\fBtexture\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBPSBindTexture\fP (\fBconst\fP \fBsTexture\fP &\fBtexture\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBPSBindTexture\fP (\fBconst\fP \fBsTexture\fP &\fBtexture\fP, \fBu32\fP \fBslot\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBPSBindTextureSlot\fP (\fBu32\fP \fBslot\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBPSUnbindTexture\fP (\fBconst\fP \fBsTexture\fP &\fBtexture\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBGSBindTexture\fP (\fBconst\fP \fBsTexture\fP &\fBtexture\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBGSBindTexture\fP (\fBconst\fP \fBsTexture\fP &\fBtexture\fP, \fBu32\fP \fBslot\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBGSBindTextureSlot\fP (\fBu32\fP \fBslot\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBGSUnbindTexture\fP (\fBconst\fP \fBsTexture\fP &\fBtexture\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBCSBindTexture\fP (\fBconst\fP \fBsTexture\fP &\fBtexture\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBCSBindTexture\fP (\fBconst\fP \fBsTexture\fP &\fBtexture\fP, \fBu32\fP \fBslot\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBCSBindTextureSlot\fP (\fBu32\fP \fBslot\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBCSUnbindTexture\fP (\fBconst\fP \fBsTexture\fP &\fBtexture\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBVSBindSampler\fP (\fBconst\fP \fBsSampler\fP &\fBsampler\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBVSUnbindSampler\fP (\fBconst\fP \fBsSampler\fP &\fBsampler\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBPSBindSampler\fP (\fBconst\fP \fBsSampler\fP &\fBsampler\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBPSUnbindSampler\fP (\fBconst\fP \fBsSampler\fP &\fBsampler\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBGSBindSampler\fP (\fBconst\fP \fBsSampler\fP &\fBsampler\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBGSUnbindSampler\fP (\fBconst\fP \fBsSampler\fP &\fBsampler\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBCSBindSampler\fP (\fBconst\fP \fBsSampler\fP &\fBsampler\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBCSUnbindSampler\fP (\fBconst\fP \fBsSampler\fP &\fBsampler\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBInit\fP ()"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBFree\fP ()"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBCreateSwapchain\fP (\fBint\fP \fBwidth\fP, \fBint\fP \fBheight\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBFreeSwapchain\fP ()"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBResizeSwapchain\fP (\fBsRenderTarget\fP &\fBpresentTarget\fP, \fBint\fP \fBwidth\fP, \fBint\fP \fBheight\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBCreateSwapchainTargetView\fP ()"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBCreateRenderTarget\fP (\fBsRenderTarget\fP &\fBrenderTarget\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBBindRenderTarget\fP (\fBconst\fP \fBvector\fP< \fBvoid\fP * > &\fBcolorViews\fP, \fBvoid\fP *\fBdepthView\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBUnbindRenderTarget\fP ()"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBClearColorTarget\fP (\fBvoid\fP *\fBcolorView\fP, \fBconst\fP glm::vec4 &\fBcolor\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBClearDepthTarget\fP (\fBvoid\fP *\fBdepthView\fP, \fBconst\fP \fBf32\fP \fBdepth\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBClearStencilTarget\fP (\fBvoid\fP *\fBdepthView\fP, \fBconst\fP \fBu8\fP \fBstencil\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBClearDepthStencilTarget\fP (\fBvoid\fP *\fBdepthView\fP, \fBconst\fP \fBf32\fP \fBdepth\fP, \fBconst\fP \fBu8\fP \fBstencil\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBFreeRenderTargetColors\fP (\fBvector\fP< \fBsTexture\fP * > &\fBcolors\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBFreeRenderTargetColorViews\fP (\fBvector\fP< \fBvoid\fP * > &\fBcolorViews\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBFreeRenderTargetDepth\fP (\fBsTexture\fP *\fBdepth\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBFreeRenderTargetDepthView\fP (\fBvoid\fP **\fBdepthView\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBResizeRenderTarget\fP (\fBsRenderTarget\fP &\fBrenderTarget\fP, \fBint\fP \fBwidth\fP, \fBint\fP \fBheight\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBPresent\fP ()"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBCreateShaderStage\fP (\fBsShaderStage\fP &\fBstage\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBFreeShaderStage\fP (\fBsShaderStage\fP &\fBstage\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBCompileShaderStage\fP (\fBsShaderStage\fP &\fBstage\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBBindVSStage\fP (\fBconst\fP \fBsShaderStage\fP &\fBstage\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBBindPSStage\fP (\fBconst\fP \fBsShaderStage\fP &\fBstage\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBBindGSStage\fP (\fBconst\fP \fBsShaderStage\fP &\fBstage\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBBindCSStage\fP (\fBconst\fP \fBsShaderStage\fP &\fBstage\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBUnbindVSStage\fP (\fBconst\fP \fBsShaderStage\fP &\fBstage\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBUnbindPSStage\fP (\fBconst\fP \fBsShaderStage\fP &\fBstage\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBUnbindGSStage\fP (\fBconst\fP \fBsShaderStage\fP &\fBstage\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBUnbindCSStage\fP (\fBconst\fP \fBsShaderStage\fP &\fBstage\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBFreeShaderResourceView\fP (\fBvoid\fP *\fBviewInstance\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBCreateTexture1D\fP (\fBsTexture\fP &\fBtexture\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBCreateTexture2D\fP (\fBsTexture\fP &\fBtexture\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBCreateTexture2DArray\fP (\fBsTexture\fP &\fBtexture\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBCreateTexture3D\fP (\fBsTexture\fP &\fBtexture\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBCreateTextureCube\fP (\fBsTexture\fP &\fBtexture\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBCreateTextureDepthStencil\fP (\fBsTexture\fP &\fBtexture\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBVSBindTexture\fP (\fBsTexture::eViewType\fP \fBviewType\fP, \fBu32\fP \fBslot\fP, \fBvoid\fP *\fBviewInstance\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBPSBindTexture\fP (\fBsTexture::eViewType\fP \fBviewType\fP, \fBu32\fP \fBslot\fP, \fBvoid\fP *\fBviewInstance\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBGSBindTexture\fP (\fBsTexture::eViewType\fP \fBviewType\fP, \fBu32\fP \fBslot\fP, \fBvoid\fP *\fBviewInstance\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBCSBindTexture\fP (\fBsTexture::eViewType\fP \fBviewType\fP, \fBu32\fP \fBslot\fP, \fBvoid\fP *\fBviewInstance\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBFreeTexture1D\fP (\fBvoid\fP *\fBinstance\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBFreeTexture2D\fP (\fBvoid\fP *\fBinstance\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBFreeTexture2DArray\fP (\fBvoid\fP *\fBinstance\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBFreeTexture3D\fP (\fBvoid\fP *\fBinstance\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBFreeTextureCube\fP (\fBvoid\fP *\fBinstance\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBFreeTextureDepthStencil\fP (\fBvoid\fP *\fBinstance\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBGenerateMips\fP (\fBconst\fP \fBsTexture\fP &\fBtexture\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBCreateSampler\fP (\fBsSampler\fP &\fBsampler\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBFreeSampler\fP (\fBsSampler\fP &\fBsampler\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBVSBindSampler\fP (\fBu32\fP \fBslot\fP, \fBvoid\fP *\fBviewInstance\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBPSBindSampler\fP (\fBu32\fP \fBslot\fP, \fBvoid\fP *\fBviewInstance\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBGSBindSampler\fP (\fBu32\fP \fBslot\fP, \fBvoid\fP *\fBviewInstance\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBCSBindSampler\fP (\fBu32\fP \fBslot\fP, \fBvoid\fP *\fBviewInstance\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBCreateBuffer\fP (\fBsBuffer\fP &\fBbuffer\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBFreeBuffer\fP (\fBsBuffer\fP &\fBbuffer\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBBindVertexBuffer\fP (\fBconst\fP \fBsBuffer\fP &\fBbuffer\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBBindIndexBuffer\fP (\fBconst\fP \fBsBuffer\fP &\fBbuffer\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBVSBindBuffer\fP (\fBsBuffer::eViewType\fP \fBviewType\fP, \fBsBuffer::eType\fP \fBtype\fP, \fBu32\fP \fBslot\fP, \fBvoid\fP *\fBinstance\fP, \fBvoid\fP *\fBviewInstance\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBPSBindBuffer\fP (\fBsBuffer::eViewType\fP \fBviewType\fP, \fBsBuffer::eType\fP \fBtype\fP, \fBu32\fP \fBslot\fP, \fBvoid\fP *\fBinstance\fP, \fBvoid\fP *\fBviewInstance\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBGSBindBuffer\fP (\fBsBuffer::eViewType\fP \fBviewType\fP, \fBsBuffer::eType\fP \fBtype\fP, \fBu32\fP \fBslot\fP, \fBvoid\fP *\fBinstance\fP, \fBvoid\fP *\fBviewInstance\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBCSBindBuffer\fP (\fBsBuffer::eViewType\fP \fBviewType\fP, \fBsBuffer::eType\fP \fBtype\fP, \fBu32\fP \fBslot\fP, \fBvoid\fP *\fBinstance\fP, \fBvoid\fP *\fBviewInstance\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP * \fBMap\fP (\fBconst\fP \fBsResource\fP &\fBresource\fP, \fBu32\fP \fBsubresourceIndex\fP, \fBsResource::eMapType\fP \fBmapType\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBUnmap\fP (\fBconst\fP \fBsResource\fP &\fBresource\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBUpdateSubData\fP (\fBconst\fP \fBsResource\fP &\fBresource\fP, \fBu32\fP \fBsubresourceIndex\fP, \fBconst\fP \fBvoid\fP *\fBdata\fP, \fBu32\fP \fBrowPitch\fP, \fBu32\fP \fBdepthPitch\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBCreateInputLayout\fP (\fBsInputLayout\fP &\fBinputLayout\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBBindInputLayout\fP (\fBconst\fP \fBsInputLayout\fP &\fBinputLayout\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBFreeInputLayout\fP (\fBsInputLayout\fP &\fBinputLayout\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBBindPrimitiveTopology\fP (\fBconst\fP \fBePrimitiveTopology\fP &\fBprimitiveTopology\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBBindViewport\fP (\fBsViewport\fP *\fBviewport\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBUnbindViewport\fP ()"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBCreateDepthStencilMode\fP (\fBsDepthStencilMode\fP &\fBdepthStencilMode\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBBindDepthStencilMode\fP (\fBvoid\fP *\fBstate\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBFreeDepthStencilMode\fP (\fBsDepthStencilMode\fP &\fBdepthStencilMode\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBCreateBlendMode\fP (\fBsBlendMode\fP &\fBblendMode\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBBindBlendMode\fP (\fBvoid\fP *\fBstate\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBFreeBlendMode\fP (\fBsBlendMode\fP &\fBblendMode\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBCreateRasterizer\fP (\fBsRasterizer\fP &\fBrasterizer\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBBindRasterizer\fP (\fBvoid\fP *\fBstate\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBFreeRasterizer\fP (\fBsRasterizer\fP &\fBrasterizer\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBDrawIndexed\fP (\fBusize\fP \fBindexCount\fP, \fBusize\fP \fBinstanceCount\fP=1, \fBusize\fP \fBvertexOffset\fP=0, \fBusize\fP \fBindexOffset\fP=0, \fBusize\fP \fBinstanceOffset\fP=0)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBDrawVertexed\fP (\fBusize\fP \fBvertexCount\fP, \fBusize\fP \fBinstanceCount\fP=1, \fBusize\fP \fBvertexOffset\fP=0, \fBusize\fP \fBinstanceOffset\fP=0)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBDrawQuad\fP ()"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBDispatch\fP (\fBconst\fP glm::ivec3 &\fBthreadGroupCount\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP * \fBGetDevice\fP ()"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBInitDebug\fP ()"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBFreeDebug\fP ()"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBbool\fP \fBGetLastMessage\fP (\fBsDebugMessage\fP &\fBmessage\fP)"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvector\fP< \fBsDebugMessage\fP > \fBGetMessageQueue\fP ()"
.br
.ti -1c
.RI "\fBENGINE_API\fP \fBvoid\fP \fBClearMessageQueue\fP ()"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBvoid\fP * \fBSwapchainTargetView\fP = \fBnullptr\fP"
.br
.ti -1c
.RI "\fBvoid\fP * \fBSwapchainTextureInstance\fP = \fBnullptr\fP"
.br
.ti -1c
.RI "\fBDebuggerCallback\fP \fBCallback\fP = \fBnullptr\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBEnableInfoLog\fP = \fBfalse\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBEnableWarnLog\fP = \fBfalse\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBEnableErrorLog\fP = \fBtrue\fP"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::BindBlendMode (\fBvoid\fP * state)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::BindCSStage (\fBconst\fP \fBsShaderStage\fP & stage)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::BindDepthStencilMode (\fBvoid\fP * state)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::BindGSStage (\fBconst\fP \fBsShaderStage\fP & stage)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::BindIndexBuffer (\fBconst\fP \fBsBuffer\fP & buffer)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::BindInputLayout (\fBconst\fP \fBsInputLayout\fP & inputLayout)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::BindPrimitiveTopology (\fBconst\fP \fBePrimitiveTopology\fP & primitiveTopology)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::BindPSStage (\fBconst\fP \fBsShaderStage\fP & stage)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::BindRasterizer (\fBvoid\fP * state)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::BindRenderTarget (\fBconst\fP \fBvector\fP< \fBvoid\fP * > & colorViews, \fBvoid\fP * depthView)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::BindRenderTarget (\fBconst\fP \fBvector\fP< \fBvoid\fP * > & colorViews, \fBvoid\fP * depthView, \fBsViewport\fP * viewport)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::BindVertexBuffer (\fBconst\fP \fBsBuffer\fP & buffer)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::BindViewport (\fBsViewport\fP * viewport)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::BindVSStage (\fBconst\fP \fBsShaderStage\fP & stage)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::ClearColorTarget (\fBvoid\fP * colorView, \fBconst\fP glm::vec4 & color)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::ClearDepthStencilTarget (\fBvoid\fP * depthView, \fBconst\fP \fBf32\fP depth, \fBconst\fP \fBu8\fP stencil)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::ClearDepthTarget (\fBvoid\fP * depthView, \fBconst\fP \fBf32\fP depth)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::ClearMessageQueue ()"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::ClearStencilTarget (\fBvoid\fP * depthView, \fBconst\fP \fBu8\fP stencil)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CompileShaderStage (\fBsShaderStage\fP & stage)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CopyBuffer (\fBconst\fP \fBsBuffer\fP & buffer, \fBconst\fP \fBvoid\fP * data, \fBusize\fP dataByteSize)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CopyBufferOffset (\fBconst\fP \fBsBuffer\fP & buffer, \fBusize\fP offset, \fBconst\fP \fBvoid\fP * data, \fBusize\fP dataByteSize)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CopyTexture (\fBconst\fP \fBsTexture\fP & texture, \fBconst\fP \fBvoid\fP * data, \fBusize\fP dataByteSize, \fBu32\fP layerIndex)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CopyTextureOffset (\fBconst\fP \fBsTexture\fP & texture, \fBusize\fP offset, \fBconst\fP \fBvoid\fP * data, \fBusize\fP dataByteSize, \fBu32\fP layerIndex)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CreateBlendMode (\fBsBlendMode\fP & blendMode)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CreateBuffer (\fBsBuffer\fP & buffer)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CreateDepthStencilMode (\fBsDepthStencilMode\fP & depthStencilMode)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CreateInputLayout (\fBsInputLayout\fP & inputLayout)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CreateRasterizer (\fBsRasterizer\fP & rasterizer)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CreateRenderTarget (\fBsRenderTarget\fP & renderTarget)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CreateSampler (\fBsSampler\fP & sampler)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CreateShaderStage (\fBsShaderStage\fP & stage)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CreateSwapchain (\fBint\fP width, \fBint\fP height)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CreateSwapchainTargetView ()"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CreateTexture (\fBsTexture\fP & texture)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CreateTexture1D (\fBsTexture\fP & texture)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CreateTexture2D (\fBsTexture\fP & texture)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CreateTexture2DArray (\fBsTexture\fP & texture)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CreateTexture3D (\fBsTexture\fP & texture)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CreateTextureCube (\fBsTexture\fP & texture)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CreateTextureDepthStencil (\fBsTexture\fP & texture)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CSBindBuffer (\fBconst\fP \fBsBuffer\fP & buffer)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CSBindBuffer (\fBsBuffer::eViewType\fP viewType, \fBsBuffer::eType\fP type, \fBu32\fP slot, \fBvoid\fP * instance, \fBvoid\fP * viewInstance)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CSBindSampler (\fBconst\fP \fBsSampler\fP & sampler)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CSBindSampler (\fBu32\fP slot, \fBvoid\fP * viewInstance)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CSBindTexture (\fBconst\fP \fBsTexture\fP & texture)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CSBindTexture (\fBconst\fP \fBsTexture\fP & texture, \fBu32\fP slot)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CSBindTexture (\fBsTexture::eViewType\fP viewType, \fBu32\fP slot, \fBvoid\fP * viewInstance)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CSBindTextureSlot (\fBu32\fP slot)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CSUnbindBuffer (\fBconst\fP \fBsBuffer\fP & buffer)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CSUnbindSampler (\fBconst\fP \fBsSampler\fP & sampler)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::CSUnbindTexture (\fBconst\fP \fBsTexture\fP & texture)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::Dispatch (\fBconst\fP glm::ivec3 & threadGroupCount)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::DrawIndexed (\fBusize\fP indexCount, \fBusize\fP instanceCount = \fR1\fP, \fBusize\fP vertexOffset = \fR0\fP, \fBusize\fP indexOffset = \fR0\fP, \fBusize\fP instanceOffset = \fR0\fP)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::DrawQuad ()"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::DrawVertexed (\fBusize\fP vertexCount, \fBusize\fP instanceCount = \fR1\fP, \fBusize\fP vertexOffset = \fR0\fP, \fBusize\fP instanceOffset = \fR0\fP)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::Free ()"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::FreeBlendMode (\fBsBlendMode\fP & blendMode)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::FreeBuffer (\fBsBuffer\fP & buffer)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::FreeDebug ()"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::FreeDepthStencilMode (\fBsDepthStencilMode\fP & depthStencilMode)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::FreeInputLayout (\fBsInputLayout\fP & inputLayout)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::FreeRasterizer (\fBsRasterizer\fP & rasterizer)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::FreeRenderTarget (\fBsRenderTarget\fP & renderTarget)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::FreeRenderTargetColors (\fBvector\fP< \fBsTexture\fP * > & colors)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::FreeRenderTargetColorViews (\fBvector\fP< \fBvoid\fP * > & colorViews)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::FreeRenderTargetDepth (\fBsTexture\fP * depth)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::FreeRenderTargetDepthView (\fBvoid\fP ** depthView)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::FreeSampler (\fBsSampler\fP & sampler)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::FreeShaderResourceView (\fBvoid\fP * viewInstance)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::FreeShaderStage (\fBsShaderStage\fP & stage)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::FreeSwapchain ()"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::FreeTexture (\fBsTexture\fP & texture)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::FreeTexture1D (\fBvoid\fP * instance)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::FreeTexture2D (\fBvoid\fP * instance)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::FreeTexture2DArray (\fBvoid\fP * instance)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::FreeTexture3D (\fBvoid\fP * instance)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::FreeTextureCube (\fBvoid\fP * instance)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::FreeTextureDepthStencil (\fBvoid\fP * instance)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::GenerateMips (\fBconst\fP \fBsTexture\fP & texture)"

.SS "\fBENGINE_API\fP \fBvoid\fP * xpe::render::context::GetDevice ()"

.SS "\fBENGINE_API\fP \fBbool\fP xpe::render::context::GetLastMessage (\fBsDebugMessage\fP & message)"

.SS "\fBENGINE_API\fP \fBvector\fP< \fBsDebugMessage\fP > xpe::render::context::GetMessageQueue ()"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::GSBindBuffer (\fBconst\fP \fBsBuffer\fP & buffer)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::GSBindBuffer (\fBsBuffer::eViewType\fP viewType, \fBsBuffer::eType\fP type, \fBu32\fP slot, \fBvoid\fP * instance, \fBvoid\fP * viewInstance)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::GSBindSampler (\fBconst\fP \fBsSampler\fP & sampler)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::GSBindSampler (\fBu32\fP slot, \fBvoid\fP * viewInstance)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::GSBindTexture (\fBconst\fP \fBsTexture\fP & texture)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::GSBindTexture (\fBconst\fP \fBsTexture\fP & texture, \fBu32\fP slot)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::GSBindTexture (\fBsTexture::eViewType\fP viewType, \fBu32\fP slot, \fBvoid\fP * viewInstance)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::GSBindTextureSlot (\fBu32\fP slot)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::GSUnbindBuffer (\fBconst\fP \fBsBuffer\fP & buffer)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::GSUnbindSampler (\fBconst\fP \fBsSampler\fP & sampler)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::GSUnbindTexture (\fBconst\fP \fBsTexture\fP & texture)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::Init ()"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::InitDebug ()"

.SS "\fBENGINE_API\fP \fBvoid\fP * xpe::render::context::Map (\fBconst\fP \fBsResource\fP & resource, \fBu32\fP subresourceIndex, \fBsResource::eMapType\fP mapType)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::MoveBuffer (\fBconst\fP \fBsBuffer\fP & buffer, \fBconst\fP \fBvoid\fP * data, \fBusize\fP dataByteSize)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::MoveBufferOffset (\fBconst\fP \fBsBuffer\fP & buffer, \fBusize\fP offset, \fBconst\fP \fBvoid\fP * data, \fBusize\fP dataByteSize)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::MoveTexture (\fBconst\fP \fBsTexture\fP & texture, \fBconst\fP \fBvoid\fP * data, \fBusize\fP dataByteSize, \fBu32\fP layerIndex)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::MoveTextureOffset (\fBconst\fP \fBsTexture\fP & texture, \fBusize\fP offset, \fBconst\fP \fBvoid\fP * data, \fBusize\fP dataByteSize, \fBu32\fP layerIndex)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::Present ()"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::PSBindBuffer (\fBconst\fP \fBsBuffer\fP & buffer)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::PSBindBuffer (\fBsBuffer::eViewType\fP viewType, \fBsBuffer::eType\fP type, \fBu32\fP slot, \fBvoid\fP * instance, \fBvoid\fP * viewInstance)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::PSBindSampler (\fBconst\fP \fBsSampler\fP & sampler)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::PSBindSampler (\fBu32\fP slot, \fBvoid\fP * viewInstance)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::PSBindTexture (\fBconst\fP \fBsTexture\fP & texture)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::PSBindTexture (\fBconst\fP \fBsTexture\fP & texture, \fBu32\fP slot)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::PSBindTexture (\fBsTexture::eViewType\fP viewType, \fBu32\fP slot, \fBvoid\fP * viewInstance)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::PSBindTextureSlot (\fBu32\fP slot)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::PSUnbindBuffer (\fBconst\fP \fBsBuffer\fP & buffer)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::PSUnbindSampler (\fBconst\fP \fBsSampler\fP & sampler)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::PSUnbindTexture (\fBconst\fP \fBsTexture\fP & texture)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::ResizeRenderTarget (\fBsRenderTarget\fP & renderTarget, \fBint\fP width, \fBint\fP height)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::ResizeSwapchain (\fBsRenderTarget\fP & presentTarget, \fBint\fP width, \fBint\fP height)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::UnbindCSStage (\fBconst\fP \fBsShaderStage\fP & stage)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::UnbindGSStage (\fBconst\fP \fBsShaderStage\fP & stage)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::UnbindPSStage (\fBconst\fP \fBsShaderStage\fP & stage)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::UnbindRenderTarget ()"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::UnbindViewport ()"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::UnbindVSStage (\fBconst\fP \fBsShaderStage\fP & stage)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::Unmap (\fBconst\fP \fBsResource\fP & resource)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::UpdateSubData (\fBconst\fP \fBsResource\fP & resource, \fBu32\fP subresourceIndex, \fBconst\fP \fBvoid\fP * data, \fBu32\fP rowPitch, \fBu32\fP depthPitch)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::VSBindBuffer (\fBconst\fP \fBsBuffer\fP & buffer)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::VSBindBuffer (\fBsBuffer::eViewType\fP viewType, \fBsBuffer::eType\fP type, \fBu32\fP slot, \fBvoid\fP * instance, \fBvoid\fP * viewInstance)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::VSBindSampler (\fBconst\fP \fBsSampler\fP & sampler)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::VSBindSampler (\fBu32\fP slot, \fBvoid\fP * viewInstance)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::VSBindTexture (\fBconst\fP \fBsTexture\fP & texture)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::VSBindTexture (\fBconst\fP \fBsTexture\fP & texture, \fBu32\fP slot)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::VSBindTexture (\fBsTexture::eViewType\fP viewType, \fBu32\fP slot, \fBvoid\fP * viewInstance)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::VSBindTextureSlot (\fBu32\fP slot)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::VSUnbindBuffer (\fBconst\fP \fBsBuffer\fP & buffer)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::VSUnbindSampler (\fBconst\fP \fBsSampler\fP & sampler)"

.SS "\fBENGINE_API\fP \fBvoid\fP xpe::render::context::VSUnbindTexture (\fBconst\fP \fBsTexture\fP & texture)"

.SH "Variable Documentation"
.PP 
.SS "\fBDebuggerCallback\fP xpe::render::context::Callback = \fBnullptr\fP"

.SS "\fBbool\fP xpe::render::context::EnableErrorLog = \fBtrue\fP"

.SS "\fBbool\fP xpe::render::context::EnableInfoLog = \fBfalse\fP"

.SS "\fBbool\fP xpe::render::context::EnableWarnLog = \fBfalse\fP"

.SS "\fBvoid\fP * xpe::render::context::SwapchainTargetView = \fBnullptr\fP"

.SS "\fBvoid\fP * xpe::render::context::SwapchainTextureInstance = \fBnullptr\fP"

.SH "Author"
.PP 
Generated automatically by Doxygen for XPE-Engine from the source code\&.
