<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="classxpe_1_1core_1_1c_event_buffer" kind="class" language="C++" prot="public">
    <compoundname>xpe::core::cEventBuffer</compoundname>
    <basecompoundref refid="classxpe_1_1core_1_1c_object" prot="public" virt="non-virtual">xpe::core::cObject</basecompoundref>
    <includes refid="event_8hpp" local="no">event.hpp</includes>
    <templateparamlist>
      <param>
        <type><ref refid="namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde" kindref="member">typename</ref> <ref refid="namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde" kindref="member">EventFunction</ref></type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classxpe_1_1core_1_1c_event_buffer_1a5ca9f9900e46fc29f2fa3d9510e09167" prot="private" static="no" mutable="no">
        <type><ref refid="namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde" kindref="member">vector</ref>&lt; <ref refid="structxpe_1_1core_1_1s_event" kindref="compound">sEvent</ref>&lt; <ref refid="namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde" kindref="member">EventFunction</ref> &gt; &gt;</type>
        <definition>vector&lt;sEvent&lt;EventFunction&gt; &gt; xpe::core::cEventBuffer&lt; EventFunction &gt;::m_Events</definition>
        <argsstring></argsstring>
        <name>m_Events</name>
        <qualifiedname>xpe::core::cEventBuffer::m_Events</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/core/event.hpp" line="77" column="20" bodyfile="engine/src/core/event.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classxpe_1_1core_1_1c_event_buffer_1a81f708eee8cbed2b35574f14931ce54a" prot="private" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex xpe::core::cEventBuffer&lt; EventFunction &gt;::m_Mutex</definition>
        <argsstring></argsstring>
        <name>m_Mutex</name>
        <qualifiedname>xpe::core::cEventBuffer::m_Mutex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/core/event.hpp" line="78" column="24" bodyfile="engine/src/core/event.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classxpe_1_1core_1_1c_event_buffer_1a2be267c957472f93aa9515646d3e3795" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xpe::core::cEventBuffer&lt; EventFunction &gt;::~cEventBuffer</definition>
        <argsstring>()</argsstring>
        <name>~cEventBuffer</name>
        <qualifiedname>xpe::core::cEventBuffer::~cEventBuffer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/core/event.hpp" line="57" column="13" bodyfile="engine/src/core/event.hpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classxpe_1_1core_1_1c_event_buffer_1a0106c2c3db24b98a723b1bbf58de4b00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde" kindref="member">void</ref></type>
        <definition>void xpe::core::cEventBuffer&lt; EventFunction &gt;::AddEvent</definition>
        <argsstring>(Args &amp;&amp;... eventArgs)</argsstring>
        <name>AddEvent</name>
        <qualifiedname>xpe::core::cEventBuffer::AddEvent</qualifiedname>
        <param>
          <type><ref refid="namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde" kindref="member">Args</ref> &amp;&amp;...</type>
          <declname>eventArgs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/core/event.hpp" line="60" column="18" bodyfile="engine/src/core/event.hpp" bodystart="89" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classxpe_1_1core_1_1c_event_buffer_1afb40e69af07e0b0629b6fee202ad0725" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde" kindref="member">void</ref></type>
        <definition>void xpe::core::cEventBuffer&lt; EventFunction &gt;::RemoveEvent</definition>
        <argsstring>(void *const _this)</argsstring>
        <name>RemoveEvent</name>
        <qualifiedname>xpe::core::cEventBuffer::RemoveEvent</qualifiedname>
        <param>
          <type><ref refid="namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde" kindref="member">void</ref> *<ref refid="namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde" kindref="member">const</ref></type>
          <declname>_this</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/core/event.hpp" line="62" column="18" bodyfile="engine/src/core/event.hpp" bodystart="102" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classxpe_1_1core_1_1c_event_buffer_1acfd3a3d7ae6153c9d4fec6e7f33243d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde" kindref="member">void</ref></type>
        <definition>void xpe::core::cEventBuffer&lt; EventFunction &gt;::Clear</definition>
        <argsstring>()</argsstring>
        <name>Clear</name>
        <qualifiedname>xpe::core::cEventBuffer::Clear</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/core/event.hpp" line="64" column="18" bodyfile="engine/src/core/event.hpp" bodystart="117" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classxpe_1_1core_1_1c_event_buffer_1a58a439d6e5a5a927f41b3f6e8be5f462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde" kindref="member">void</ref></type>
        <definition>void xpe::core::cEventBuffer&lt; EventFunction &gt;::Reserve</definition>
        <argsstring>(const usize count)</argsstring>
        <name>Reserve</name>
        <qualifiedname>xpe::core::cEventBuffer::Reserve</qualifiedname>
        <param>
          <type><ref refid="namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde" kindref="member">const</ref> <ref refid="namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde" kindref="member">usize</ref></type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/core/event.hpp" line="66" column="18" bodyfile="engine/src/core/event.hpp" bodystart="125" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classxpe_1_1core_1_1c_event_buffer_1aea68f47d551082a2b6878a5e18b1bdf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde" kindref="member">void</ref></type>
        <definition>void xpe::core::cEventBuffer&lt; EventFunction &gt;::NotifyAll</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>NotifyAll</name>
        <qualifiedname>xpe::core::cEventBuffer::NotifyAll</qualifiedname>
        <param>
          <type><ref refid="namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde" kindref="member">Args</ref> &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/core/event.hpp" line="69" column="18" bodyfile="engine/src/core/event.hpp" bodystart="134" bodyend="141"/>
        <referencedby refid="structxpe_1_1core_1_1s_observer_sample_count_1a139ad0f42b4f4fada31c94a4c12ede63" compoundref="observers_8cpp" startline="5" endline="10">xpe::core::sObserverSampleCount::sObserverSampleCount</referencedby>
        <referencedby refid="structxpe_1_1core_1_1s_observer_window_ratio_1ae68d3a3544c87ab3b2af8ad258c6248d" compoundref="observers_8cpp" startline="12" endline="17">xpe::core::sObserverWindowRatio::sObserverWindowRatio</referencedby>
      </memberdef>
      <memberdef kind="function" id="classxpe_1_1core_1_1c_event_buffer_1aa4a92e5cf28a047819c1bc32c84b7ba8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde" kindref="member">const</ref> <ref refid="namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde" kindref="member">vector</ref>&lt; <ref refid="structxpe_1_1core_1_1s_event" kindref="compound">sEvent</ref>&lt; <ref refid="namespacexpe_1_1core_1a7a9b1d92471db2af59acf8c301267fde" kindref="member">EventFunction</ref> &gt; &gt; &amp;</type>
        <definition>const vector&lt; sEvent&lt; EventFunction &gt; &gt; &amp; xpe::core::cEventBuffer&lt; EventFunction &gt;::GetEvents</definition>
        <argsstring>() const</argsstring>
        <name>GetEvents</name>
        <qualifiedname>xpe::core::cEventBuffer::GetEvents</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/core/event.hpp" line="71" column="33" bodyfile="engine/src/core/event.hpp" bodystart="71" bodyend="74"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>xpe::core::cEventBuffer&lt; EventFunction &gt;</label>
        <link refid="classxpe_1_1core_1_1c_event_buffer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>xpe::core::cObject</label>
        <link refid="classxpe_1_1core_1_1c_object"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>xpe::core::cEventBuffer&lt; EventFunction &gt;</label>
        <link refid="classxpe_1_1core_1_1c_event_buffer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>xpe::core::cObject</label>
        <link refid="classxpe_1_1core_1_1c_object"/>
      </node>
    </collaborationgraph>
    <location file="engine/src/core/event.hpp" line="53" column="9" bodyfile="engine/src/core/event.hpp" bodystart="54" bodyend="79"/>
    <listofallmembers>
      <member refid="classxpe_1_1core_1_1c_event_buffer_1a0106c2c3db24b98a723b1bbf58de4b00" prot="public" virt="non-virtual"><scope>xpe::core::cEventBuffer</scope><name>AddEvent</name></member>
      <member refid="classxpe_1_1core_1_1c_event_buffer_1acfd3a3d7ae6153c9d4fec6e7f33243d4" prot="public" virt="non-virtual"><scope>xpe::core::cEventBuffer</scope><name>Clear</name></member>
      <member refid="classxpe_1_1core_1_1c_event_buffer_1aa4a92e5cf28a047819c1bc32c84b7ba8" prot="public" virt="non-virtual"><scope>xpe::core::cEventBuffer</scope><name>GetEvents</name></member>
      <member refid="classxpe_1_1core_1_1c_event_buffer_1a5ca9f9900e46fc29f2fa3d9510e09167" prot="private" virt="non-virtual"><scope>xpe::core::cEventBuffer</scope><name>m_Events</name></member>
      <member refid="classxpe_1_1core_1_1c_event_buffer_1a81f708eee8cbed2b35574f14931ce54a" prot="private" virt="non-virtual"><scope>xpe::core::cEventBuffer</scope><name>m_Mutex</name></member>
      <member refid="classxpe_1_1core_1_1c_event_buffer_1aea68f47d551082a2b6878a5e18b1bdf8" prot="public" virt="non-virtual"><scope>xpe::core::cEventBuffer</scope><name>NotifyAll</name></member>
      <member refid="classxpe_1_1core_1_1c_object_1af52ced913116436c9a1410d942d1911e" prot="public" virt="non-virtual"><scope>xpe::core::cEventBuffer</scope><name>operator delete</name></member>
      <member refid="classxpe_1_1core_1_1c_object_1a94001505b3b68276770a97bc35079194" prot="public" virt="non-virtual"><scope>xpe::core::cEventBuffer</scope><name>operator new</name></member>
      <member refid="classxpe_1_1core_1_1c_event_buffer_1afb40e69af07e0b0629b6fee202ad0725" prot="public" virt="non-virtual"><scope>xpe::core::cEventBuffer</scope><name>RemoveEvent</name></member>
      <member refid="classxpe_1_1core_1_1c_event_buffer_1a58a439d6e5a5a927f41b3f6e8be5f462" prot="public" virt="non-virtual"><scope>xpe::core::cEventBuffer</scope><name>Reserve</name></member>
      <member refid="classxpe_1_1core_1_1c_event_buffer_1a2be267c957472f93aa9515646d3e3795" prot="public" virt="non-virtual"><scope>xpe::core::cEventBuffer</scope><name>~cEventBuffer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
