<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="macro__debugbreak_8hpp" kind="file" language="C++">
    <compoundname>macro_debugbreak.hpp</compoundname>
    <includes local="no">signal.h</includes>
    <includedby refid="pch_8hpp" local="no">engine/src/pch.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>engine/src/core/macro_debugbreak.hpp</label>
        <link refid="macro__debugbreak_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>signal.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>engine/src/core/macro_debugbreak.hpp</label>
        <link refid="macro__debugbreak_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>engine/src/pch.hpp</label>
        <link refid="pch_8hpp"/>
      </node>
    </invincdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="macro__debugbreak_8hpp_1a6cdc9c19c0a13bc232490c1fb41e46f1" prot="public" static="no">
        <name>DEBUG_BREAK_USE_TRAP_INSTRUCTION</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/core/macro_debugbreak.hpp" line="11" column="9" bodyfile="engine/src/core/macro_debugbreak.hpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macro__debugbreak_8hpp_1ae48584e4922446b31641048bb86b27a7" prot="public" static="no">
        <name>DEBUG_BREAK_USE_BULTIN_TRAP</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/core/macro_debugbreak.hpp" line="12" column="9" bodyfile="engine/src/core/macro_debugbreak.hpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macro__debugbreak_8hpp_1a605b7652504a9313d59dcd6179a5f230" prot="public" static="no">
        <name>DEBUG_BREAK_USE_SIGTRAP</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/core/macro_debugbreak.hpp" line="13" column="9" bodyfile="engine/src/core/macro_debugbreak.hpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macro__debugbreak_8hpp_1a14b2cb5f82905f2bc27ba0ef96a36aee" prot="public" static="no">
        <name>DEBUG_BREAK_IMPL</name>
        <initializer><ref refid="macro__debugbreak_8hpp_1a605b7652504a9313d59dcd6179a5f230" kindref="member">DEBUG_BREAK_USE_SIGTRAP</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/core/macro_debugbreak.hpp" line="104" column="11" bodyfile="engine/src/core/macro_debugbreak.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="macro__debugbreak_8hpp_1a372a9503e67211b07cd698712947e693" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>__attribute__</definition>
        <argsstring>((always_inline)) __inline__ static void debug_break(void)</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(always_inline)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/core/macro_debugbreak.hpp" line="130" column="1" bodyfile="engine/src/core/macro_debugbreak.hpp" bodystart="130" bodyend="134"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>debug_break<sp/>__debugbreak</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="macro__debugbreak_8hpp_1a6cdc9c19c0a13bc232490c1fb41e46f1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEBUG_BREAK_USE_TRAP_INSTRUCTION<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="macro__debugbreak_8hpp_1ae48584e4922446b31641048bb86b27a7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEBUG_BREAK_USE_BULTIN_TRAP<sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="macro__debugbreak_8hpp_1a605b7652504a9313d59dcd6179a5f230" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEBUG_BREAK_USE_SIGTRAP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__i386__)<sp/>||<sp/>defined(__x86_64__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>DEBUG_BREAK_IMPL<sp/>DEBUG_BREAK_USE_TRAP_INSTRUCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">__inline__<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>trap_instruction(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;int<sp/>$0x03&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__thumb__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>DEBUG_BREAK_IMPL<sp/>DEBUG_BREAK_USE_TRAP_INSTRUCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><ref refid="macro__debugbreak_8hpp_1a372a9503e67211b07cd698712947e693" kindref="member">__attribute__</ref>((always_inline))</highlight></codeline>
<codeline lineno="24"><highlight class="normal">__inline__<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>trap_instruction(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>&apos;arm-linux-tdep.c&apos;<sp/>in<sp/>GDB<sp/>source.</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Both<sp/>instruction<sp/>sequences<sp/>below<sp/>work.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&apos;eabi_linux_thumb_le_breakpoint&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;.inst<sp/>0xde01&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&apos;eabi_linux_thumb2_le_breakpoint&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;.inst.w<sp/>0xf7f0a000&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Known<sp/>problem:</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>After<sp/>a<sp/>breakpoint<sp/>hit,<sp/>can&apos;t<sp/>&apos;stepi&apos;,<sp/>&apos;step&apos;,<sp/>or<sp/>&apos;continue&apos;<sp/>in<sp/>GDB.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>&apos;step&apos;<sp/>would<sp/>keep<sp/>getting<sp/>stuck<sp/>on<sp/>the<sp/>same<sp/>instruction.</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Workaround:<sp/>use<sp/>the<sp/>new<sp/>GDB<sp/>commands<sp/>&apos;debugbreak-step&apos;<sp/>and</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>&apos;debugbreak-continue&apos;<sp/>that<sp/>become<sp/>available</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>after<sp/>you<sp/>source<sp/>the<sp/>script<sp/>from<sp/>GDB:</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>$<sp/>gdb<sp/>-x<sp/>debugbreak-gdb.py<sp/>&lt;...<sp/>USUAL<sp/>ARGUMENTS<sp/>...&gt;</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>&apos;debugbreak-step&apos;<sp/>would<sp/>jump<sp/>over<sp/>the<sp/>breakpoint<sp/>instruction<sp/>with</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>roughly<sp/>equivalent<sp/>of:</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(gdb)<sp/>set<sp/>$instruction_len<sp/>=<sp/>2</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(gdb)<sp/>tbreak<sp/>*($pc<sp/>+<sp/>$instruction_len)</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(gdb)<sp/>jump<sp/><sp/><sp/>*($pc<sp/>+<sp/>$instruction_len)</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__arm__)<sp/>&amp;&amp;<sp/>!defined(__thumb__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>DEBUG_BREAK_IMPL<sp/>DEBUG_BREAK_USE_TRAP_INSTRUCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><ref refid="macro__debugbreak_8hpp_1a372a9503e67211b07cd698712947e693" kindref="member">__attribute__</ref>((always_inline))</highlight></codeline>
<codeline lineno="56"><highlight class="normal">__inline__<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>trap_instruction(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>&apos;arm-linux-tdep.c&apos;<sp/>in<sp/>GDB<sp/>source,</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>&apos;eabi_linux_arm_le_breakpoint&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;.inst<sp/>0xe7f001f0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Known<sp/>problem:</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Same<sp/>problem<sp/>and<sp/>workaround<sp/>as<sp/>Thumb<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__aarch64__)<sp/>&amp;&amp;<sp/>defined(__APPLE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>DEBUG_BREAK_IMPL<sp/>DEBUG_BREAK_USE_BULTIN_DEBUGTRAP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__aarch64__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>DEBUG_BREAK_IMPL<sp/>DEBUG_BREAK_USE_TRAP_INSTRUCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="macro__debugbreak_8hpp_1a372a9503e67211b07cd698712947e693" kindref="member">__attribute__</ref>((always_inline))</highlight></codeline>
<codeline lineno="69"><highlight class="normal">__inline__<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>trap_instruction(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>&apos;aarch64-tdep.c&apos;<sp/>in<sp/>GDB<sp/>source,</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>&apos;aarch64_default_breakpoint&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;.inst<sp/>0xd4200000&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__powerpc__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PPC<sp/>32<sp/>or<sp/>64-bit,<sp/>big<sp/>or<sp/>little<sp/>endian<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>DEBUG_BREAK_IMPL<sp/>DEBUG_BREAK_USE_TRAP_INSTRUCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><ref refid="macro__debugbreak_8hpp_1a372a9503e67211b07cd698712947e693" kindref="member">__attribute__</ref>((always_inline))</highlight></codeline>
<codeline lineno="79"><highlight class="normal">__inline__<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>trap_instruction(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>&apos;rs6000-tdep.c&apos;<sp/>in<sp/>GDB<sp/>source,</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>&apos;rs6000_breakpoint&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;.4byte<sp/>0x7d821008&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Known<sp/>problem:</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>After<sp/>a<sp/>breakpoint<sp/>hit,<sp/>can&apos;t<sp/>&apos;stepi&apos;,<sp/>&apos;step&apos;,<sp/>or<sp/>&apos;continue&apos;<sp/>in<sp/>GDB.</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>&apos;step&apos;<sp/>stuck<sp/>on<sp/>the<sp/>same<sp/>instruction<sp/>(&quot;twge<sp/>r2,r2&quot;).</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>workaround<sp/>is<sp/>the<sp/>same<sp/>as<sp/>ARM<sp/>Thumb<sp/>mode:<sp/>use<sp/>debugbreak-gdb.py</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>or<sp/>manually<sp/>jump<sp/>over<sp/>the<sp/>instruction.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__riscv)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>RISC-V<sp/>32<sp/>or<sp/>64-bit,<sp/>whether<sp/>the<sp/>&quot;C&quot;<sp/>extension</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>for<sp/>compressed,<sp/>16-bit<sp/>instructions<sp/>are<sp/>supported<sp/>or<sp/>not<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>DEBUG_BREAK_IMPL<sp/>DEBUG_BREAK_USE_TRAP_INSTRUCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><ref refid="macro__debugbreak_8hpp_1a372a9503e67211b07cd698712947e693" kindref="member">__attribute__</ref>((always_inline))</highlight></codeline>
<codeline lineno="97"><highlight class="normal">__inline__<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>trap_instruction(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>&apos;riscv-tdep.c&apos;<sp/>in<sp/>GDB<sp/>source,</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>&apos;riscv_sw_breakpoint_from_kind&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>__asm__<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;.4byte<sp/>0x00100073&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="macro__debugbreak_8hpp_1a14b2cb5f82905f2bc27ba0ef96a36aee" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>DEBUG_BREAK_IMPL<sp/>DEBUG_BREAK_USE_SIGTRAP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DEBUG_BREAK_IMPL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;Debugbreak<sp/>is<sp/>not<sp/>supported<sp/>on<sp/>this<sp/>target&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>DEBUG_BREAK_IMPL<sp/>==<sp/>DEBUG_BREAK_USE_TRAP_INSTRUCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><ref refid="macro__debugbreak_8hpp_1a372a9503e67211b07cd698712947e693" kindref="member">__attribute__</ref>((always_inline))</highlight></codeline>
<codeline lineno="112"><highlight class="normal">__inline__<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>debug_break(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>trap_instruction();</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>DEBUG_BREAK_IMPL<sp/>==<sp/>DEBUG_BREAK_USE_BULTIN_DEBUGTRAP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><ref refid="macro__debugbreak_8hpp_1a372a9503e67211b07cd698712947e693" kindref="member">__attribute__</ref>((always_inline))</highlight></codeline>
<codeline lineno="118"><highlight class="normal">__inline__<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>debug_break(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>__builtin_debugtrap();</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>DEBUG_BREAK_IMPL<sp/>==<sp/>DEBUG_BREAK_USE_BULTIN_TRAP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><ref refid="macro__debugbreak_8hpp_1a372a9503e67211b07cd698712947e693" kindref="member">__attribute__</ref>((always_inline))</highlight></codeline>
<codeline lineno="124"><highlight class="normal">__inline__<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>debug_break(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>__builtin_trap();</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>DEBUG_BREAK_IMPL<sp/>==<sp/>DEBUG_BREAK_USE_SIGTRAP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="macro__debugbreak_8hpp_1a372a9503e67211b07cd698712947e693" refkind="member"><highlight class="normal"><ref refid="macro__debugbreak_8hpp_1a372a9503e67211b07cd698712947e693" kindref="member">__attribute__</ref>((always_inline))</highlight></codeline>
<codeline lineno="131"><highlight class="normal">__inline__<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>debug_break(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>raise(SIGTRAP);</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;invalid<sp/>DEBUG_BREAK_IMPL<sp/>value&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ifdef<sp/>_MSC_VER<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="engine/src/core/macro_debugbreak.hpp"/>
  </compounddef>
</doxygen>
