#include ../types.shader
#include ../utils.shader

#include ../materials/material.shader

#include ../lighting/direct_light.shader
#include ../lighting/point_light.shader
#include ../lighting/spot_light.shader

struct VSOut
{
    float3 positionWorld : XPE_POSITION_WORLD;
    float2 uv : XPE_UV2;
    float3 normal : XPE_NORMAL_WORLD;  // normalized
    float4 positionClip : SV_POSITION;
    float3 viewPosition : XPE_VIEW_POSITION;
    uint materialIndex : XPE_MATERIAL_INDEX;
    float3x3 tbn : XPE_TBN;
    float gamma : XPE_GAMMA;
};

float4 ps_main(VSOut psIn) : SV_TARGET
{
    W = psIn.positionWorld;
    V = normalize(psIn.viewPosition - psIn.positionWorld);
    N = GetNormal(psIn.materialIndex, psIn.uv, psIn.normal, psIn.tbn);

    float4 albedo = GetAlbedo(psIn.materialIndex, psIn.uv);
    albedo = GammaCorrect(albedo, psIn.gamma);

    float metallic = GetMetallic(psIn.materialIndex, psIn.uv);
    float roughness = GetRoughness(psIn.materialIndex, psIn.uv);
    float ao = GetAO(psIn.materialIndex, psIn.uv);

    float3 color = albedo.rgb;

    uint directLightSize = 0;
    uint directLightStride = 0;
    DirectLights.GetDimensions(directLightSize, directLightStride);

    for (uint i = 0 ; i < directLightSize ; i++) {
        DirectLight directLight = DirectLights[i];
        float3 lightPos = directLight.Position;
        float3 lightColor = directLight.Color;
        L = normalize(lightPos - W);
        R = reflect(-L, N);

        float ambient = (1.0 - ao);
        float diffuse = roughness * max(dot(N, L), 0.0);
        float specular = (1.0 - roughness) * pow(max(dot(V, R), 0.0), 32);

        color = albedo.rgb * (ambient + diffuse + specular) * lightColor;
    }

    return float4(color, 1.0);
}