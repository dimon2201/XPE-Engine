#include ../types.shader
#include atlas.shader

struct VSOut
{
    float3 positionWorld : XPE_POSITION_WORLD;
    float2 texcoord : XPE_UV2;
    float3 normal : XPE_NORMAL2;  // normalized
    float4 positionClip : SV_POSITION;
    float3 viewPosition : XPE_VIEW_POSITION;
    float2 glyphSize : XPE_GLYPH_SIZE;
    float2 glyphAtlasOffset : XPE_GLYPH_ATLAS_OFFSET;
};

float4 ps_main(VSOut psIn) : SV_TARGET
{
    uint width = 0;
    uint height = 0;
    M_Atlas.GetDimensions(width, height);
    float2 atlasSize = float2(width, height);
    float2 fGlyphSize = psIn.glyphSize / atlasSize;
    float2 fOffset = psIn.glyphAtlasOffset / atlasSize;
    float2 texcoord = fOffset + (float2(psIn.texcoord.x, 1.0 - psIn.texcoord.y) * fGlyphSize);

    float value = M_Atlas.Sample(S_Atlas, texcoord).x;
    if (value == 0.0) {
        discard;
    }

    return float4(value, value, value, value);
}