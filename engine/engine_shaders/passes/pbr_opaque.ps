#include ../types.shader
#include ../material.shader
#include ../lighting.shader
#include ../shadow.shader
#include ../pbr.shader
#include ../gamma_correction.shader

struct VSOut
{
    float3 positionWorld    : XPE_POSITION_WORLD;
    float zView             : XPE_Z_VIEW;
    float2 uv               : XPE_UV2;
    float3 normal           : XPE_NORMAL_WORLD;
    float4 positionClip     : SV_POSITION;
    float3 viewPosition     : XPE_VIEW_POSITION;
    uint materialIndex      : XPE_MATERIAL_INDEX;
    float3x3 tbn            : XPE_TBN;
    float gamma             : XPE_GAMMA;
    uint shadowCasterCount  : XPE_SHADOW_CASTER_COUNT;
    float4 shadowCasters[5] : XPE_SHADOW_CASTERS;
};

struct PSOut
{
    float4 color : SV_Target0;
    float4 position : SV_Target1;
    float4 normal : SV_Target2;
};

PSOut ps_main(VSOut psIn)
{
    UV = psIn.uv;
    W = psIn.positionWorld;
    V = normalize(psIn.viewPosition - psIn.positionWorld);
    N = GetNormal(psIn.materialIndex, psIn.uv, psIn.normal, psIn.tbn);
    float NdotV = max(dot(N, V), 0.0);
    R = reflect(-V, N);



    // Color
    float3 Lo = DirectLights[0].Color;

    for (int i = 0; i < psIn.shadowCasterCount; i++) {
        if (IsShadowed(i, psIn.shadowCasters[i], psIn.positionWorld)) {
            Lo *= float3(0.25, 0.25, 0.25);
        }
    }

    PSOut psOut;
    psOut.color = float4(Lo, 1.0);
    psOut.position = float4(W, 1.0);
    psOut.normal = float4(N, 1.0);

    return psOut;
}