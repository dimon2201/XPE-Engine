#include ../types.shader

SamplerState   FontSampler     : K_SLOT_FONT_SAMPLER;
Texture2D      FontAtlas       : K_SLOT_FONT_ATLAS;

struct VSOut
{
    float4 positionOut : SV_POSITION;
    float2 uv : XPE_UV2;
    float2 glyphSize : XPE_GLYPH_SIZE;
    float2 glyphAtlasOffset : XPE_GLYPH_ATLAS_OFFSET;
    float4 textColor : XPE_TEXT_COLOR;
};

struct PSOut
{
    float4 color : SV_Target0;
};

PSOut ps_main(VSOut psIn)
{
    PSOut psOut;

    float2 uv = psIn.uv;
    float4 color = psIn.textColor;

    uint fontWidth = 0;
    uint fontHeight = 0;
    FontAtlas.GetDimensions(fontWidth, fontHeight);
    float2 fontAtlasSize = float2(fontWidth, fontHeight);
    float2 fGlyphSize = psIn.glyphSize / fontAtlasSize;
    float2 fOffset = psIn.glyphAtlasOffset / fontAtlasSize;
    uv = fOffset + (float2(uv.x, 1.0 - uv.y) * fGlyphSize);

    float font = FontAtlas.Sample(FontSampler, uv).x;

    color *= float4(font, font, font, font);

    psOut.color = color;

    return psOut;
}