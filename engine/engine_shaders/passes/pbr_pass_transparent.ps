#include ../types.shader
#include ../tonemap.shader
#include ../material.shader
#include ../shadow.shader
#include ../lighting.shader
#include ../pbr.shader

struct VSOut
{
    float3 positionWorld : XPE_POSITION_WORLD;
    float zView          : XPE_Z_VIEW;
    float2 uv            : XPE_UV2;
    float3 normal        : XPE_NORMAL_WORLD;
    float4 positionClip  : SV_POSITION;
    float3 viewPosition  : XPE_VIEW_POSITION;
    uint materialIndex   : XPE_MATERIAL_INDEX;
    float3x3 tbn         : XPE_TBN;
    float3 shadowCoords  : XPE_SHADOW_COORDS;
    float gamma          : XPE_GAMMA;
};

struct PSOut
{
    float4 accum : SV_Target0;
    float reveal : SV_Target1;
};

PSOut ps_main(VSOut psIn)
{
    UV = psIn.uv;
    W = psIn.positionWorld;
    V = normalize(psIn.viewPosition - psIn.positionWorld);
    N = GetNormal(psIn.materialIndex, psIn.uv, psIn.normal, psIn.tbn);
    float NdotV = max(dot(N, V), 0.0);
    R = reflect(-V, N);

    UV = GetParallax(psIn.materialIndex, psIn.uv);

    float gamma = psIn.gamma;

    float4 albedo = GetAlbedo(psIn.materialIndex, psIn.uv, gamma);
    float metallness = GetMetallness(psIn.materialIndex, psIn.uv);
    float roughness = GetRoughness(psIn.materialIndex, psIn.uv);
    float ao = GetAO(psIn.materialIndex, psIn.uv);
    float3 emission = GetEmission(psIn.materialIndex, psIn.uv, gamma);
    float3 shadowCoords = psIn.shadowCoords;

    // PBR with light sources
    float3 Lo = float3(0, 0, 0);

    uint directLightSize = 0;
    uint directLightStride = 0;
    DirectLights.GetDimensions(directLightSize, directLightStride);
    for (uint i = 0 ; i < directLightSize ; i++) {
        Lo += PBR(DirectLights[i], albedo.rgb, metallness, roughness, shadowCoords);
    }

    uint pointLightSize = 0;
    uint pointLightStride = 0;
    PointLights.GetDimensions(pointLightSize, pointLightStride);
    for (uint j = 0 ; j < pointLightSize ; j++) {
        Lo += PBR(PointLights[j], albedo.rgb, metallness, roughness, shadowCoords);
    }

    uint spotLightSize = 0;
    uint spotLightStride = 0;
    SpotLights.GetDimensions(spotLightSize, spotLightStride);
    for (uint k = 0 ; k < spotLightSize ; k++) {
        Lo += PBR(SpotLights[k], albedo.rgb, metallness, roughness, shadowCoords);
    }

    // PBR with IBL
    // float3 ambient = ibl(NdotV, N, R, albedo.rgb, metallness, roughness, shadowCoords);
    float3 ambient = float3(0, 0, 0);

    // Color
    float4 color = float4((Lo + ambient) * (1.0 - ao), albedo.a);
    color = GammaCorrection(color, gamma);

    // Weighted blended
    float weight = max(min(1.0, max(max(color.r, color.g), color.b) * color.a), color.a) *
        clamp(0.03 / (K_EPSILON + (psIn.zView / 200.0)), 1e-2, 3e3);
    float4 accum = float4(color.rgb * color.a, color.a) * weight;
    float reveal = color.a;

    PSOut psOut;
    psOut.accum = accum;
    psOut.reveal = reveal;

    return psOut;
}