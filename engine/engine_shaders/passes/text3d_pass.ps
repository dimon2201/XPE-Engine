#include ../types.shader
#include ../text/text_atlas.shader

struct VSOut
{
    float2 uv : XPE_UV2;
    float3 normal : XPE_NORMAL2;  // normalized
    float4 positionClip : SV_POSITION;
    float3 viewPosition : XPE_VIEW_POSITION;
    float2 glyphSize : XPE_GLYPH_SIZE;
    float2 glyphAtlasOffset : XPE_GLYPH_ATLAS_OFFSET;
};

struct PSOut
{
    float4 color : SV_Target0;
};

PSOut ps_main(VSOut psIn)
{
    PSOut psOut;

    uint width = 0;
    uint height = 0;
    TextAtlas.GetDimensions(width, height);
    float2 atlasSize = float2(width, height);
    float2 fGlyphSize = psIn.glyphSize / atlasSize;
    float2 fOffset = psIn.glyphAtlasOffset / atlasSize;
    float2 uv = fOffset + (float2(psIn.uv.x, 1.0 - psIn.uv.y) * fGlyphSize);

    float value = TextAtlas.Sample(TextAtlasSampler, uv).x;
    if (value == 0.0) {
        discard;
    }

    psOut.color = float4(value, value, value, value);

    return psOut;
}